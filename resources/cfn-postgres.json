{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "RDS Postgres",

    "Parameters" : {

        "PrivateSubnets" : {
            "Description" : "List of VPC private subnet IDs for the cluster. Note: must match up with the passed AvailabilityZones.",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "AvailabilityZones": {
            "Description" : "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Note: these must match up with the passed Subnets.",
            "Type" : "CommaDelimitedList",
            "Default" : ""
        },
        "VpcId" : {
            "Description" : "VPC associated with the provided subnets",
            "Type" : "AWS::EC2::VPC::Id"
        },
        "Environment" : {
            "Description" : "Environment tag",
            "Type" : "String",
            "Default" : "integration",
            "AllowedValues" : [ "integration", "staging", "production" ]
        },

        "ArtifactBucket" : {
            "Description" : "S3 Bucket where build artifacts are stored",
            "Type" : "String",
            "Default" : "promotably-build-artifacts"
        },
        "ArtifactPath" : {
            "Description" : "Path in S3 bucket to standalone.jar, source.zip, apid",
            "Type" : "String"
        },

        "DBName" : {
            "Description" : "Database name",
            "Type" : "String"
        },
        "DBUsername" : {
            "Description" : "Database username",
            "Type" : "String"
        },
        "DBPassword" : {
            "Description" : "Database password",
            "Type" : "String",
            "NoEcho" : "true"
        },
        "DBClass" : {
            "Description" : "Database instance class",
            "Type" : "String",
            "Default" : "default"
        },
        "DBAllocatedStorage" : {
            "Description" : "Database allocated storage (GB)",
            "Type" : "String"
        },
        "DBStorageThreshold" : {
            "Description" : "Threshold for CloudWatch free storage alarm (Bytes)",
            "Type" : "String"
        },
        "DBSnapshotId" : {
            "Description" : "DB Snapshot to restore from (empty string for fresh database)",
            "Type" : "String",
            "Default" : "default"
        },

        "KeyPair": {
            "Description": "Name of the keypair to use for SSH access",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "VpcDefaultSecurityGroup" : {
            "Description" : "VPC default Security Group",
            "Type" : "AWS::EC2::SecurityGroup::Id"
        },
        "ClientSecurityGroup" : {
            "Description" : "DB Client Security Group",
            "Type" : "AWS::EC2::SecurityGroup::Id"
        },
        "AutoTermMigrator" : {
            "Description" : "Automatically terminate instance after running migrations",
            "Type" : "String",
            "Default" : "true",
            "AllowedValues" : [ "true", "false" ]
        }
    },

    "Conditions" : {
        "UseAllAvailabilityZones" : { "Fn::Equals" : [{ "Fn::Join" : [ "", { "Ref" : "AvailabilityZones" } ]}, "" ]},
        "DefaultDBClass" : { "Fn::Equals" : [ { "Ref" : "DBClass" }, "default" ]},
        "DbRestore" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DBSnapshotId" }, "default" ] }]}
    },

    "Mappings" : {
        "config" : {
            "us-east-1" : { "ami" : "ami-1ecae776" },
            "us-west-2" : { "ami" : "ami-e7527ed7" },
            "eu-west-2" : { "ami" : "ami-a10897d6" },

            "integration" : {
                "dbClass" : "db.t2.small",
                "multiAZ" : "false",
                "backupRetention" : "0"
            },
            "staging" : {
                "dbClass" : "db.t1.micro",
                "multiAZ" : "false",
                "backupRetention" : "7"
            },
            "production" : {
                "dbClass" : "db.t2.small",
                "multiAZ" : "true",
                "backupRetention" : "14"
            }
        }
    },

    "Resources" : {

        "DBSubnetGroup" : {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "DBSubnetGroupDescription" : { "Ref" : "AWS::StackName" },
                "SubnetIds" : { "Ref" : "PrivateSubnets" },
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" }}]
            }
        },

        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription" : { "Ref" : "AWS::StackName" },
                "VpcId" : { "Ref" : "VpcId" },
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" }}]
            }
        },

        "PostgresIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "GroupId" : { "Ref" : "SecurityGroup" },
                "IpProtocol" : "tcp",
                "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup" },
                "FromPort" : "5432", "ToPort" : "5432"
            }
        },

        "DBInstance" : {
            "Type": "AWS::RDS::DBInstance",
            "DeletionPolicy" : "Snapshot",
            "Properties": {
                "DBName"            : { "Fn::If" : [ "DbRestore", { "Ref" : "AWS::NoValue" }, { "Ref" : "DBName" } ]},
                "Engine"            : "postgres",
                "MasterUsername"    : { "Ref" : "DBUsername" },
                "MasterUserPassword": { "Ref" : "DBPassword" },
                "MultiAZ" : { "Fn::FindInMap" : [ "config", { "Ref" : "Environment" }, "multiAZ" ]},
                "DBInstanceClass"   : { "Fn::If" : [ "DefaultDBClass",
                                        { "Fn::FindInMap" : [ "config", { "Ref" : "Environment" }, "dbClass" ]},
                                        { "Ref" : "DBClass" } ]},
                "VPCSecurityGroups"  : [{ "Ref" : "SecurityGroup" }],
                "AllocatedStorage"  : { "Ref" : "DBAllocatedStorage" },
                "StorageType" : "gp2",
                "DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" },
                "BackupRetentionPeriod" : { "Fn::FindInMap" : [ "config", { "Ref" : "Environment" }, "backupRetention" ]},
                "DBSnapshotIdentifier" : { "Fn::If" : [ "DbRestore", { "Ref" : "DBSnapshotId" }, { "Ref" : "AWS::NoValue" } ]},
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" }}]
            }
        },

        "DiskSpaceAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Alarm if diskspace is too low",
                "Namespace": "AWS/RDS",
                "MetricName": "FreeStorageSpace",
                "Dimensions": [{ "Name": "DBInstanceIdentifier", "Value": { "Ref" : "DBInstance" }}],
                "Statistic": "Average",
                "Period": "3600",
                "EvaluationPeriods": "3",
                "Threshold": { "Ref" : "DBStorageThreshold" },
                "ComparisonOperator": "LessThanOrEqualToThreshold",
                "AlarmActions": [{ "Fn::Join" : [ "-", [ { "Fn::Select" : [ "0", { "Ref" : "AWS::NotificationARNs" } ] }, "notification" ] ] }]
            }
        },

        "CPUUsageAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Alarm if CPU is utilized at 50% or more for 10min",
                "Namespace": "AWS/RDS",
                "MetricName": "CPUUtilization",
                "Dimensions": [{ "Name": "DBInstanceIdentifier", "Value": { "Ref" : "DBInstance" }}],
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "10",
                "Threshold": "50",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "AlarmActions": [{ "Fn::Join" : [ "-", [ { "Fn::Select" : [ "0", { "Ref" : "AWS::NotificationARNs" } ] }, "notification" ] ] }]
            }
        },

        "ReadLatencyAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Alarm if ReadLatency is 100ms or more for 5min",
                "Namespace": "AWS/RDS",
                "MetricName": "ReadLatency",
                "Dimensions": [{ "Name": "DBInstanceIdentifier", "Value": { "Ref" : "DBInstance" }}],
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "5",
                "Threshold": "0.100",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "AlarmActions": [{ "Fn::Join" : [ "-", [ { "Fn::Select" : [ "0", { "Ref" : "AWS::NotificationARNs" } ] }, "notification" ] ] }]
            }
        },

        "WriteLatencyAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Alarm if WriteLatency is 100ms or more for 5min",
                "Namespace": "AWS/RDS",
                "MetricName": "WriteLatency",
                "Dimensions": [{ "Name": "DBInstanceIdentifier", "Value": { "Ref" : "DBInstance" }}],
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "5",
                "Threshold": "0.100",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "AlarmActions": [{ "Fn::Join" : [ "-", [ { "Fn::Select" : [ "0", { "Ref" : "AWS::NotificationARNs" } ] }, "notification" ] ] }]
            }
        },

        "MigratorRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "Path" : "/",
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Principal" : { "Service" : [ "ec2.amazonaws.com" ] },
                        "Action" : [ "sts:AssumeRole" ]
                    }]
                },
                "Policies" : [{
                    "PolicyName" : "root",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [{
                            "Effect": "Allow",
                            "Action": [ "s3:Get*" ],
                            "Resource": [{ "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "ArtifactBucket" }, "/*" ] ] }]
                        },{
                            "Effect": "Allow",
                            "Action": [ "autoscaling:TerminateInstanceInAutoScalingGroup" ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "InstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ { "Ref": "MigratorRole" } ]
            }
        },


        "LaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "roleName" : { "Ref" : "MigratorRole" },
                        "buckets" : [ { "Ref" : "ArtifactBucket" } ]
                    }
                },
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "postgresql93" : [],
                                "git" : []
                            }
                        },
                        "files" : {
                            "/opt/promotably/api.zip" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "ArtifactPath" }, "/source.zip" ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/tmp/postgres_setup.sql" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "\\c ", {"Ref": "DBName"}, "\n",
                                    "CREATE EXTENSION \"uuid-ossp\";\n",
                                    "CREATE TABLE IF NOT EXISTS migrations(version varchar(255));\n"
                                ] ]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        },
                        "commands" : {
                            "00-prep" :{
                                "ignoreErrors" : "false",
                                "command" : { "Fn::Join" : [ "", [
                                    "\n",
                                    "curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > /usr/local/bin/lein\n",
                                    "chmod 0755 /usr/local/bin/lein\n",
                                    "rm -rf /opt/promotably/api\n",
                                    "mkdir -p /opt/promotably/api\n",
                                    "cd /opt/promotably/api\n",
                                    "unzip ../api.zip\n"
                                ]]}
                            },
                            "01-db-setup" : {
                                "cwd" : "/opt/promotably/api",
                                "ignoreErrors" : "false",
                                "env" : {
                                    "PGPASSWORD" : {"Ref": "DBPassword"},
                                    "ARTIFACT_BUCKET" : { "Ref": "ArtifactBucket" },
                                    "KINESIS_A" : "unknown",
                                    "KINESIS_B" : "unknown",
                                    "REDIS_HOST" : "localhost",
                                    "REDIS_PORT" : "6379",
                                    "RDS_DB_NAME" : { "Ref": "DBName" },
                                    "RDS_HOST" : { "Fn::GetAtt" : [ "DBInstance", "Endpoint.Address" ]},
                                    "RDS_PORT" : { "Fn::GetAtt" : [ "DBInstance", "Endpoint.Port" ]},
                                    "RDS_USER" : { "Ref": "DBUsername" },
                                    "RDS_PW" : { "Ref": "DBPassword" },
                                    "ENV" : { "Ref": "Environment" },
                                    "LEIN_ROOT" : "yes",
                                    "MIDJE_COLORIZE" : "false",
                                    "STACKNAME" : { "Ref": "AWS::StackName" }
                                },
                                "command" : { "Fn::Join": [ "", [
                                    "psql -f /tmp/postgres_setup.sql -h $RDS_HOST -p $RDS_PORT",
                                      " -U  $RDS_USER -d $RDS_DB_NAME\n",
                                    "lein migrate\n"
                                ] ]}
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "ami" ]},
                "SecurityGroups" : [{ "Ref" : "ClientSecurityGroup" }, { "Ref" : "VpcDefaultSecurityGroup" }],
                "InstanceType" : "t2.micro",
                "KeyName": { "Ref": "KeyPair" },
                "IamInstanceProfile": { "Ref": "InstanceProfile" },
                "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
                    "#!/bin/bash -ex\n",
                    "\n",
                    ". /etc/profile.d/aws-apitools-common.sh\n",
                    "\n",
                    "cfn-init -v -s ", { "Ref": "AWS::StackId" },
                      " -r LaunchConfig --region ", { "Ref": "AWS::Region" }, "\n",
                    "\n",
                    "[ '", { "Ref" : "AutoTermMigrator" }, "' = 'true' ] || exit 0\n",
                    "instance_id=$(ec2-metadata -i | awk '{print $2}')\n",
                    "aws autoscaling terminate-instance-in-auto-scaling-group ",
                      "--instance-id $instance_id --should-decrement-desired-capacity ",
                      "--region ", { "Ref" : "AWS::Region" }, "\n"
                ] ]} }
            }
        },

        "LaunchGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : { "Fn::If" : [ "UseAllAvailabilityZones",
                    { "Fn::GetAZs": "" },
                    { "Ref" : "AvailabilityZones" }
                ] },
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "MinSize" : "0",
                "MaxSize" : "1",
                "DesiredCapacity" : 1,
                "HealthCheckGracePeriod" : "300",
                "Cooldown" : "600",
                "VPCZoneIdentifier" : { "Ref" : "PrivateSubnets" },
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" }, "PropagateAtLaunch" : "true" },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" }, "PropagateAtLaunch" : "true" }]
            }
        }
    },

    "Outputs" : {
        "DBName" : {
            "Description" : "Database Name",
            "Value" : { "Ref" : "DBName" }
        },
        "DBHost" : {
            "Description" : "RDS Hostname",
            "Value" : { "Fn::GetAtt" : [ "DBInstance", "Endpoint.Address" ]}
        },
        "DBPort" : {
            "Description" : "RDS Port",
            "Value" : { "Fn::GetAtt": [ "DBInstance", "Endpoint.Port" ]}
        },
        "MigrationsLaunchGroup" : {
            "Description" : "Auto-scaling group for lein migration",
            "Value" : { "Ref": "LaunchGroup" }
        }
    }
}
