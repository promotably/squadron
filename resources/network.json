{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Networking infrastructure.",

    "Parameters" : {

        "BastionKeyName" : {
            "Description" : "Name of an EC2 KeyPair to enable SSH access to the bastion host (default is no ssh key)",
            "Type" : "String",
            "Default": "None",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern" : "[-_ a-zA-Z0-9]*",
            "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
        },

        "NATKeyName" : {
            "Description" : "Name of an EC2 KeyPair to enable SSH access to the nat host (default is no ssh key)",
            "Type" : "String",
            "Default": "None",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern" : "[-_ a-zA-Z0-9]*",
            "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
        },

        "SSHFrom" : {
            "Description" : "Lockdown SSH access to the bastion host (default is no access)",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default" : "999.999.999.999/32",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
        },

        "BastionInstanceType" : {
            "Description" : "Bastion Host EC2 instance type",
            "Type" : "String",
            "Default" : "t1.micro",
            "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },

        "BastionKeyBucket" : {
            "Description" : "Name of the bucket where EC2 Keypairs are stored.",
            "Type" : "String",
            "Default" : "promotably-keyvault"
        },

        "NATInstanceType" : {
            "Description" : "NET Device EC2 instance type",
            "Type" : "String",
            "Default" : "m1.small",
            "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        }
    },

    "Mappings" : {

        "config" : {
            "cidr" : {
                "VPC"            : "10.236.0.0/16",
                "PublicAll"      : "10.236.128.0/17",
                "PrivateAll"     : "10.236.0.0/17",

                "PublicSubnetA"  : "10.236.128.0/20",
                "PublicSubnetB"  : "10.236.144.0/20",
                "PublicSubnetC"  : "10.236.160.0/20",

                "PrivateSubnetA" : "10.236.0.0/20",
                "PrivateSubnetB" : "10.236.16.0/20",
                "PrivateSubnetC" : "10.236.32.0/20"
            }
        },

        "AWSNATAMI" : {
            "us-east-1"      : { "AMI" : "ami-c6699baf" },
            "us-west-2"      : { "AMI" : "ami-52ff7262" },
            "eu-west-1"      : { "AMI" : "ami-0b5b6c7f" }
        },

        "BastionAMI" : {
            "us-east-1" :      { "id" : "ami-83dee0ea" },
            "us-west-2" :      { "id" : "ami-d0d8b8e0" },
            "eu-west-1" :      { "id" : "ami-aa56a1dd" }
        },

        "PreferredAz" : {
            "us-east-1" : { "A": "us-east-1a", "B": "us-east-1c", "C": "us-east-1d" },
            "us-west-2" : { "A": "us-west-2a", "B": "us-west-2b", "C": "us-west-2c" },
            "eu-west-1" : { "A": "eu-west-1a", "B": "eu-west-1b", "C": "eu-west-1c" }
        }
    },

    "Conditions" : {
        "SSHFrom" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "SSHFrom" }, "999.999.999.999/32" ] }] },
        "Bastion" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "BastionKeyName" }, "None" ] }] },
        "NATKeyName" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "NATKeyName" }, "None" ] }] }
    },

    "Resources" : {

        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "VPC" ]},
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "PublicSubnetA" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "PreferredAz", { "Ref" : "AWS::Region" }, "A" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PublicSubnetA" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "PublicSubnetA" }]
            }
        },

        "PublicSubnetB" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "PreferredAz", { "Ref" : "AWS::Region" }, "B" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PublicSubnetB" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "PublicSubnetB" }]
            }
        },

        "PublicSubnetC" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "PreferredAz", { "Ref" : "AWS::Region" }, "C" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PublicSubnetC" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "PublicSubnetC" }]
            }
        },

        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "GatewayToInternet" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PublicRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "PublicSubnetARouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetA" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },

        "PublicSubnetBRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetB" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },

        "PublicSubnetCRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetC" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },

        "PublicNetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "InboundHTTPPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "80", "To" : "80" }
            }
        },

        "InboundHTTPSPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "101",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "443", "To" : "443" }
            }
        },

        "InboundVpcPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "102",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "VPC" ] }
            }
        },

        "InboundSSHPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Condition" : "SSHFrom",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "103",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Ref" : "SSHFrom" },
                "PortRange" : { "From" : "22", "To" : "22" }
            }
        },

        "InboundNtpTcpPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "104",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "123", "To" : "123" }
            }
        },

        "InboundNtpUdpPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "105",
                "Protocol" : "17",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "123", "To" : "123" }
            }
        },

        "InboundEphemeralTcpPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "106",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "1024", "To" : "65535" }
            }
        },

        "InboundEphemeralTcpPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "107",
                "Protocol" : "17",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "1024", "To" : "65535" }
            }
        },

        "OutboundPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0"
            }
        },

        "PublicSubnetANetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetA" },
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
            }
        },

        "PublicSubnetBNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetB" },
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
            }
        },

        "PublicSubnetCNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetC" },
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
            }
        },

        "PrivateSubnetA" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "PreferredAz", { "Ref" : "AWS::Region" }, "A" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateSubnetA" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "PrivateSubnetA" }]
            }
        },

        "PrivateSubnetB" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "PreferredAz", { "Ref" : "AWS::Region" }, "B" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateSubnetB" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "PrivateSubnetB" }]
            }
        },

        "PrivateSubnetC" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "PreferredAz", { "Ref" : "AWS::Region" }, "C" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateSubnetC" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "PrivateSubnetC" }]
            }
        },

        "PrivateRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "Private" }]
            }
        },

        "PrivateRoute" : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PrivateRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId" : { "Ref" : "NATDevice" }
            }
        },

        "PrivateSubnetARouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetA" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },

        "PrivateSubnetBRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetB" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },

        "PrivateSubnetCRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetC" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },

        "PrivateNetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Network", "Value" : "Private" }]
            }
        },

        "InboundPrivateNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0"
            }
        },

        "OutBoundPrivateNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0"
            }
        },

        "PrivateSubnetANetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetA" },
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
            }
        },

        "PrivateSubnetBNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetB" },
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
            }
        },

        "PrivateSubnetCNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetC" },
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
            }
        },

        "VpcDefaultSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " Default Group" ] ]},
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "SourceSecurityGroupId" : { "Ref" : "BastionSecurityGroup" }}
                ],
                "SecurityGroupEgress"  : [
                    { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" },
                    { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : "0.0.0.0/0" },
                    { "IpProtocol" : "tcp", "FromPort" : "123",  "ToPort" : "123",  "CidrIp" : "0.0.0.0/0" },
                    { "IpProtocol" : "udp", "FromPort" : "123",  "ToPort" : "123",  "CidrIp" : "0.0.0.0/0" }
                ]
            }
        },

        "NATSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " NAT" ] ]},
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateAll" ]}},
                    { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateAll" ]}},
                    { "IpProtocol" : "tcp", "FromPort" : "123", "ToPort" : "123", "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateAll" ]}},
                    { "IpProtocol" : "udp", "FromPort" : "123", "ToPort" : "123", "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateAll" ]}}
                ]
            }
        },

        "NATIPAddress" : {
            "Type" : "AWS::EC2::EIP",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "Domain" : "vpc",
                "InstanceId" : { "Ref" : "NATDevice" }
            }
        },

        "NATDevice" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "InstanceType" : { "Ref" : "NATInstanceType" },
                "SubnetId" : { "Ref" : "PublicSubnetA" },
                "KeyName"  : { "Fn::If" : [ "NATKeyName", { "Ref" : "NATKeyName" }, { "Ref" : "AWS::NoValue" } ] },
                "SourceDestCheck" : "false",
                "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
                "SecurityGroupIds" : [{ "Ref" : "NATSecurityGroup" }, { "Ref" : "VpcDefaultSecurityGroup" }],
                "Tags": [{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "nat" ] ]} }]
            }
        },

        "BastionIPAddress" : {
            "Type" : "AWS::EC2::EIP",
            "Condition" : "Bastion",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "Domain" : "vpc",
                "InstanceId" : { "Ref" : "BastionHost" }
            }
        },

        "BastionUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": {
                        "Statement": [{
                            "Effect":"Allow",
                            "Action": [ "cloudformation:DescribeStackResource" ],
                            "Resource":"*"
                        },{
                            "Effect" : "Allow",
                            "Action": [ "s3:*" ],
                            "Resource": [
                                { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "BastionKeyBucket"}]] },
                                { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "BastionKeyBucket"}, "/*"]] },
                                { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "BastionKeyBucket"}, "/", {"Ref" : "AWS::Region"}, "/*"]] }
                            ]
                        }]
                    }
                }]
            }
        },

        "BastionUserKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref": "BastionUser" }
            }
        },

        "BastionSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " Bastion" ] ]},
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : { "Fn::If" : [ "SSHFrom",
                    [{ "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHFrom" }}],
                    { "Ref" : "AWS::NoValue" }
                ]},
                "SecurityGroupEgress"  : [
                    { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "VPC" ]}},
                    { "IpProtocol" : "tcp", "FromPort" : "11371",  "ToPort" : "11371",  "CidrIp" : "0.0.0.0/0" }
                ]
            }
        },

        "BastionHost" : {
            "Type" : "AWS::EC2::Instance",
            "Condition" : "Bastion",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "apt" : {
                                "s3cmd" : []
                            }
                        },
                        "files" : {
                            "/home/ubuntu/.s3cfg" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[default]\n",
                                    "access_key = ", { "Ref" : "BastionUserKeys" }, "\n",
                                    "secret_key = ", { "Fn::GetAtt": ["BastionUserKeys", "SecretAccessKey"] }, "\n",
                                    "use_https = True\n"
                                ]]},
                                "mode"   : "000644",
                                "owner"  : "ubuntu",
                                "group"  : "ubuntu"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "BastionInstanceType" },
                "KeyName"  : { "Ref" : "BastionKeyName" },
                "SubnetId" : { "Ref" : "PublicSubnetA" },
                "ImageId"  : { "Fn::FindInMap": [ "BastionAMI", { "Ref": "AWS::Region" }, "id" ] },
                "SecurityGroupIds" : [{ "Ref" : "BastionSecurityGroup" }, { "Ref" : "VpcDefaultSecurityGroup" }],
                "UserData" : {
                    "Fn::Base64" : { "Fn::Join" : ["", [
                        "#!/bin/bash -ex\n",
                        "apt-get -y install python-setuptools emacs\n",
                        "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                        "cfn-init --region ", { "Ref" : "AWS::Region" }, " -s ", { "Ref" : "AWS::StackId" }, " -r BastionHost",
                          " --access-key ", { "Ref" : "BastionUserKeys" }, " --secret-key ",
                          { "Fn::GetAtt" : ["BastionUserKeys", "SecretAccessKey"] }, "\n",
                        "s3cmd sync -c /home/ubuntu/.s3cfg s3://", { "Ref" : "BastionKeyBucket" }, "/", { "Ref" : "AWS::Region" }, "/ /home/ubuntu/\n",
                        "chmod 0400 /home/ubuntu/*.pem\n"
                    ]]}
                },
                "Tags": [{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "bastion" ] ]} }]
            }
        }
    },

    "Outputs" : {
        "VPCId" : {
            "Description" : "VPCId of the newly created VPC",
            "Value" :  { "Ref" : "VPC" }
        },
        "PublicSubnetA" : {
            "Description" : "SubnetId of the public subnet",
            "Value" :  { "Ref" : "PublicSubnetA" }
        },
        "PublicSubnetB" : {
            "Description" : "SubnetId of the public subnet",
            "Value" :  { "Ref" : "PublicSubnetB" }
        },
        "PublicSubnetC" : {
            "Description" : "SubnetId of the public subnet",
            "Value" :  { "Ref" : "PublicSubnetC" }
        },
        "PrivateSubnetA" : {
            "Description" : "SubnetId of the private subnet",
            "Value" :  { "Ref" : "PrivateSubnetA" }
        },
        "PrivateSubnetB" : {
            "Description" : "SubnetId of the private subnet",
            "Value" :  { "Ref" : "PrivateSubnetB" }
        },
        "PrivateSubnetC" : {
            "Description" : "SubnetId of the private subnet",
            "Value" :  { "Ref" : "PrivateSubnetC" }
        },
        "Bastion" : {
            "Description" : "IP Address of the Bastion host",
            "Value" : { "Fn::If" : [ "Bastion", { "Ref" : "BastionIPAddress" }, "None" ] }
        },
        "VpcDefaultSecurityGroup" : {
            "Description" : "VPC Default Security Group",
            "Value" : { "Ref" : "VpcDefaultSecurityGroup" }
        },
        "BastionSecurityGroup" : {
            "Description" : "Security Group of the Bastion Host",
            "Value" : { "Ref" : "BastionSecurityGroup" }
        },
        "NATSecurityGroup" : {
            "Description" : "Security Group of the NAT Devices",
            "Value" : { "Ref" : "NATSecurityGroup" }
        },
        "AvailabilityZones" : {
            "Description" : "List of availablity zones in which VPC is deployed",
            "Value" : { "Fn::Join" : [ ",", [
                { "Fn::FindInMap" : [ "PreferredAz", { "Ref" : "AWS::Region" }, "A" ]},
                { "Fn::FindInMap" : [ "PreferredAz", { "Ref" : "AWS::Region" }, "B" ]},
                { "Fn::FindInMap" : [ "PreferredAz", { "Ref" : "AWS::Region" }, "C" ]}
            ] ]}
        }
    }
}
