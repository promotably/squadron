{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Pagify",
    
    "Parameters" : {
	"KinesisStreamA" : {
	    "Description" : "The name of the Kinesis Stream. This was autogenerated by the Kinesis Resource named 'KinesisStreamA'",
	    "Type" : "String"
	},

	"KinesisStreamB" : {
	    "Description" : "The name of the Kinesis Stream. This was autogenerated by the Kinesis Resource named 'KinesisStreamB'",
	    "Type" : "String"
	},
	"GitHubRef" : {
	    "Description" : "Github tag or branch name to fetch for pagify repo",
	    "Type" : "String",
	    "Default" : "master"
	},
	"GitHubUser" : {
	    "Description" : "Github username",
	    "Type" : "String"
	},
	"GitHubPW" : {
	    "Description" : "Github password",
	    "Type" : "String"
	},
	"PublicSubnetId" : {
	    "Description" : "VPC public subnet ID for pagify host.",
	    "Type" : "AWS::EC2::Subnet::Id"
	},
	"PrivateSubnetId" : {
	    "Description" : "VPC private subnet ID for pagify host.",
	    "Type" : "AWS::EC2::Subnet::Id"
	},
	"VpcId" : {
	    "Description" : "VPC associated with the provided subnets",
	    "Type" : "AWS::EC2::VPC::Id"
	},
	"Environment" : {
	    "Description" : "Environment tag",
	    "Type" : "String",
	    "Default" : "integration"
	},
	"Role" : {
	    "Description" : "Role tag",
	    "Type" : "String",
	    "Default" : "pagify"
	},
	"BastionSecurityGroup" : {
	    "Description" : "Security Group associated with bastion host",
	    "Type" : "AWS::EC2::SecurityGroup::Id"
	},
	"KeyPair": {
	    "Description": "Name of the keypair to use for SSH access",
	    "Type": "AWS::EC2::KeyPair::KeyName"
	}
    },

    "Resources" : {

	"RootRole": {
	    "Type" : "AWS::IAM::Role",
	    "Properties" : {
		"AssumeRolePolicyDocument": {
		    "Version" : "2012-10-17",
		    "Statement" : [ {
			"Effect" : "Allow",
			"Principal" : {
			    "Service" : [ "ec2.amazonaws.com" ]
			},
			"Action" : [ "sts:AssumeRole" ]
		    } ]
		},
		"Path" : "/"
	    }
	},

	"RolePolicies" : {
	    "Type" : "AWS::IAM::Policy",
	    "Properties" : {
		"PolicyName" : "root",
		"PolicyDocument" : {
		    "Version" : "2012-10-17",
		    "Statement" : [ {
			"Effect" : "Allow",
			"Action" : "kinesis:*",
			"Resource" : { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisStreamA" } ]]}
		    }, {
			"Effect" : "Allow",
			"Action" : "kinesis:*",
			"Resource" : { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisStreamB" } ]]}
		    }, {
			"Effect" : "Allow",
			"Action" : "cloudwatch:*",
			"Resource" : "*"
		    }, {
			"Effect" : "Allow",
			"Action" : "dynamodb:*",
			"Resource" : "*"
		    } ]
		},
		"Roles" : [ { "Ref": "RootRole" } ]
	    }
	},
	
	"RootInstanceProfile" : {
	    "Type" : "AWS::IAM::InstanceProfile",
	    "Properties" : {
		"Path" : "/",
		"Roles" : [ { "Ref": "RootRole" } ]
	    }
	},

	"PagifySecurityGroup": {
	    "Type": "AWS::EC2::SecurityGroup",
	    "Properties": {
		"GroupDescription": "Pagify Security Group",
		"VpcId" : { "Ref" : "VpcId" },
		"SecurityGroupIngress": 
		[ { "IpProtocol": "tcp",
		    "FromPort": "80",
		    "ToPort": "80",
		    "CidrIp": "0.0.0.0/0" },
		  { "IpProtocol": "tcp",
		    "FromPort": "22",
		    "ToPort": "22",
		    "SourceSecurityGroupId" : { "Ref" : "BastionSecurityGroup"} }
		]
	    }
	},

	"PagifyInstance" : {
	    "Type" : "AWS::EC2::Instance",
	    "Metadata" : {
		"AWS::CloudFormation::Init" : {
		    "config" : {
			"packages" : {
			    "yum" : {
				"ec2-net-utils": [],
				"java-1.7.0-openjdk" : [],
				"git" : []
			    }
			},
			"files" : {
			    "/etc/cron.d/get_iam_config" : {
			        "content" : "*/5 * * * * root /usr/local/bin/get_iam_config",
			        "mode"    : "000644",
			        "owner"   : "root",
			        "group"   : "root"
			    },
			    "/usr/local/bin/get_iam_config" : {
			        "content" : { "Fn::Join" : ["", [
				    "#! /bin/bash\n",
				    "export ROLE=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/)\n",
				    "curl http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE > /tmp/iamconfig\n"
				]]},
			        "mode"    : "000755",
			        "owner"   : "root",
			        "group"   : "root"
			    },
			    "/etc/cfn/cfn-hup.conf" : {
				"content" : { "Fn::Join" : ["", [
				    "[main]\n",
				    "stack=", { "Ref" : "AWS::StackId" }, "\n",
				    "region=", { "Ref" : "AWS::Region" }, "\n"
				]]},
				"mode"    : "000400",
				"owner"   : "root",
				"group"   : "root"
			    },
			    "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
				"content": { "Fn::Join" : ["", [
				    "[cfn-auto-reloader-hook]\n",
				    "triggers=post.update\n",
				    "path=Resources.PagifyInstance.Metadata.AWS::CloudFormation::Init\n",
				    "action=/opt/aws/bin/cfn-init -v ",
				    "         --stack ", { "Ref" : "AWS::StackName" },
				    "         --resource PagifyInstance ",
				    "         --region ", { "Ref" : "AWS::Region" }, "\n",
				    "runas=root\n"
				]]}
			    }
			},
			"commands" : {
			    "01-get-iam-config" : {
				"command" : "/usr/local/bin/get_iam_config"
			    }
			},
			"services" : {
			    "sysvinit" : {
				"cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
					      "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
			    }
			}
		    }
		}
	    },
	    "Properties" : {
		"KeyName": { "Ref": "KeyPair" },
		"ImageId" : "ami-b66ed3de",
		"InstanceType" : "t2.micro",
		"IamInstanceProfile": { "Ref": "RootInstanceProfile" },
		"Tags": [ { "Key": "Name", "Value": "Pagify Instance" } ],
		"NetworkInterfaces" : [ { "AssociatePublicIpAddress" : true,
					  "DeviceIndex": 0,
					  "GroupSet": [ { "Ref": "PagifySecurityGroup" } ],
					  "SubnetId" : { "Ref" : "PublicSubnetId" } } ],
		"UserData": {
		    "Fn::Base64": {
			"Fn::Join": [
			    "",
			    [
				"#!/bin/bash -ex\n",

				"yum update -y aws-cfn-bootstrap\n",
				"yum update -y curl\n",
				"yum install ec2-net-utils -y\n",

			        "# Setup tasks\n",
				"/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r PagifyInstance ",
				"         --region ", { "Ref" : "AWS::Region" }, "\n",

			        "# Get Pagify tarball\n",
				"curl -sL --user '", { "Ref" : "GitHubUser" }, ":", { "Ref" : "GitHubPW" }, "'", 
				" https://api.github.com/repos/promotably/pagify/tarball/",
				{ "Ref" : "GitHubRef" }, " > /tmp/pagify.tar\n",
				"mkdir -p /opt/promotably\n",
				"tar -xf /tmp/pagify.tar -C /opt/promotably\n",
				"ln -s /opt/promotably/* /opt/promotably/pagify\n",

				"# Install lein\n",
				"curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > /usr/local/bin/lein\n",
				"chmod a+x /usr/local/bin/lein\n",

				"# Run Pagify\n",
				"export KINESIS_A=", {"Ref": "KinesisStreamA"}, "\n",
				"export KINESIS_B=", {"Ref": "KinesisStreamB"}, "\n",
				"export ENV=", {"Ref": "Environment"}, "\n",
				"export LEIN_ROOT=yes\n",
				"export STACKNAME=", { "Ref": "AWS::StackName" }, "\n",
				"cd /opt/promotably/pagify && /usr/local/bin/lein run 2>&1 > /var/log/pagify.log &\n",
				
			        "# Signal the status of cfn-init\n",
			        "/opt/aws/bin/cfn-signal -e $? ",
			        "         --stack ", { "Ref" : "AWS::StackName" },
			        "         --resource PagifyInstance ",
			        "         --region ", { "Ref" : "AWS::Region" }, "\n"
			    ]
			]
		    }
		}
	    }
	}
    },
    
    "Outputs" : {

	"URL": {
	    "Description": "URL for testing",
	    "Value": {
		"Fn::Join": [
		    "",
		    [
			"http://", { "Fn::GetAtt": [ "PagifyInstance", "PublicDnsName" ] }
		    ]
		]
	    }
	}
    }
}
