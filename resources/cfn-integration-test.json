{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Integration Test",

    "Parameters" : {
        "ArtifactBucket" : {
            "Description" : "S3 Bucket where build artifacts are stored",
            "Type" : "String",
            "Default" : "promotably-build-artifacts"
        },
        "MetaDataBucket" : {
            "Description" : "S3 Bucket where build metadata is stored",
            "Type" : "String",
            "Default" : "promotably-build-metadata"
        },
        "Project" : {
            "Description" : "Name of project being test",
            "Type" : "String",
            "Default" : "None",
            "AllowedValues" : [ "None", "squadron", "api", "scribe" ]
        },
        "CiName" : {
            "Description" : "Name of CI system (base path in ArtifactBucket)",
            "Type" : "String",
            "Default" : "codeship"
        },
        "BuildNum" : {
            "Description" : "Build number",
            "Type" : "String",
            "Default" : "None"
        },

        "SquadronRef" : {
            "Description" : "Ref of Squadron build to use",
            "Type" : "String"
        },
        "ApiRef" : {
            "Description" : "Ref of API build to use",
            "Type" : "String"
        },
        "ScribeRef" : {
            "Description" : "Ref of Scribe build to use",
            "Type" : "String"
        },
        "DashboardRef" : {
            "Description" : "Git ref of dashboard to refer to",
            "Type" : "String",
            "Default" : "latest"
        },

        "SshKey" :  {
            "Description" : "Name of an EC2 KeyPair to enable SSH access (default is no ssh key)",
            "Type" : "String",
            "Default": "None",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern" : "[-_ a-zA-Z0-9]*",
            "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
        },

        "KeyBucket" : {
            "Description" : "Name of the bucket where EC2 Keypairs are stored.",
            "Type" : "String",
            "Default" : "promotably-keyvault"
        },

        "TestResultsEmail" : {
            "Description" : "Send Integration Test results to this email",
            "Type" : "String",
            "Default" : "integration-tests@promotably.com"
        },
        "AutoTermStack" : {
            "Description" : "Auto-delete stacks after successful test run",
            "Type" : "String",
            "Default" : "true",
            "AllowedValues" : [ "true", "false" ]
        }
    },

    "Mappings" : {
    },

    "Resources" : {

        "TestRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "Path" : "/",
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Principal" : { "Service" : [ "ec2.amazonaws.com" ] },
                        "Action" : [ "sts:AssumeRole" ]
                    }]
                },
                "Policies" : [{
                    "PolicyName" : "root",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [{ "Effect": "Allow", "Action": "*", "Resource": "*" }]
                    }
                }]
            }
        },

        "TestInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ { "Ref": "TestRole" } ]
            }
        },

        "TestHostIPAddress" : {
            "Type" : "AWS::EC2::EIP"
        },

        "Network" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : "TestInstanceProfile",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-network.json" ] ]},
                "Parameters" : {
                    "BastionKeyName" : { "Ref" : "SshKey" },
                    "NATKeyName" : { "Ref" : "SshKey" },
                    "SSHFrom" : { "Fn::Join" : [ "/", [ { "Ref" : "TestHostIPAddress" }, "32" ]]}
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Redis" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : "TestInstanceProfile",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-redis.json" ] ]},
                "Parameters" : {
                    "PrivateSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetC" ] } ]]},
                    "VpcId" : { "Fn::GetAtt" : [ "Network", "Outputs.VPCId" ] },
                    "Environment" : "integration"
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Rds" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : "TestInstanceProfile",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-postgres.json" ] ]},
                "Parameters" : {
                    "PrivateSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetC" ] } ]]},
                    "VpcId" : { "Fn::GetAtt" : [ "Network", "Outputs.VPCId" ] },
                    "Environment" : "integration",
                    "DBName" : "promotably",
                    "DBUsername" : "promotably",
                    "DBPassword" : "promotably",
                    "DBAllocatedStorage" : "10"
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Kinesis" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : "TestInstanceProfile",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-kinesis.json" ] ]},
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Api" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : "TestInstanceProfile",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-api.json" ] ]},
                "Parameters" : {
                    "DashboardRef" : { "Ref" : "DashboardRef" },
                    "ArtifactBucket" : { "Ref" : "ArtifactBucket" },
                    "ArtifactPath" : { "Fn::Join" : [ "/", [ { "Ref" : "CiName" }, "api", { "Ref" : "ApiRef" } ] ]},
                    "PublicSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetC" ] } ]]},
                    "PrivateSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetC" ] } ]]},
                    "VpcId" : { "Fn::GetAtt" : [ "Network", "Outputs.VPCId" ] },
                    "Environment" : "integration",
                    "VpcDefaultSecurityGroup" : { "Fn::GetAtt" : [ "Network", "Outputs.VpcDefaultSecurityGroup" ] },
                    "NATSecurityGroup" : { "Fn::GetAtt" : [ "Network", "Outputs.NATSecurityGroup" ] },
                    "KeyPair" : { "Ref" : "SshKey" },
                    "RedisCluster" : { "Fn::GetAtt" : [ "Redis", "Outputs.RedisCluster" ] },
                    "RedisClientSecGrp" : { "Fn::GetAtt" : [ "Redis", "Outputs.RedisClientSecGrp" ] },
                    "DBHost" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBHost" ] },
                    "DBPort" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBPort" ] },
                    "DBName" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBName" ] },
                    "DBUsername" : "promotably",
                    "DBPassword" : "promotably",
                    "DBClientSecGrp" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBClientSecGrp" ] },
                    "KinesisStreamA" : { "Fn::GetAtt" : [ "Kinesis", "Outputs.KinesisStreamA" ] },
                    "KinesisStreamB" : { "Fn::GetAtt" : [ "Kinesis", "Outputs.KinesisStreamB" ] }
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Scribe" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : "TestInstanceProfile",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-scribe.json" ] ]},
                "Parameters" : {
                    "ArtifactBucket" : { "Ref" : "ArtifactBucket" },
                    "ArtifactPath" : { "Fn::Join" : [ "/", [ { "Ref" : "CiName" }, "scribe", { "Ref" : "ScribeRef" } ] ]},
                    "DBHost" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBHost" ] },
                    "DBPort" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBPort" ] },
                    "DBName" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBName" ] },
                    "DBUsername" : "promotably",
                    "DBPassword" : "promotably",
                    "DBClientSecGrp" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBClientSecGrp" ] },
                    "KinesisStreamA" : { "Fn::GetAtt" : [ "Kinesis", "Outputs.KinesisStreamA" ] },
                    "KinesisStreamB" : { "Fn::GetAtt" : [ "Kinesis", "Outputs.KinesisStreamB" ] },
                    "PublicSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetC" ] } ]]},
                    "VpcId" : { "Fn::GetAtt" : [ "Network", "Outputs.VPCId" ] },
                    "Environment" : "integration",
                    "VpcDefaultSecurityGroup" : { "Fn::GetAtt" : [ "Network", "Outputs.VpcDefaultSecurityGroup" ] },
                    "KeyPair" : { "Ref" : "SshKey" }
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "TestInstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " Test Instance" ] ]},
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/00" }
                ]
            }
        },

        "InstanceWaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },

        "TestHost" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "roleName" : { "Ref" : "TestRole" },
                        "buckets" : [ { "Ref" : "KeyBucket" }, { "Ref" : "ArtifactBucket" } ]
                    }
                },
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "files" : {
                            "/root/.ssh/id_rsa" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "KeyBucket" }, ".s3.amazonaws.com/", { "Ref" : "SshKey" }, ".pem" ]]},
                                "mode"    : "000600",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/home/ec2-user/.ssh/id_rsa" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "KeyBucket" }, ".s3.amazonaws.com/", { "Ref" : "SshKey" }, ".pem" ]]},
                                "mode"    : "000600",
                                "owner"   : "ec2-user",
                                "group"   : "ec2-user"
                            },
                            "/root/run_tests.sh" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/integration_test_driver.sh" ]]},
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : "t2.micro",
                "KeyName"  : { "Ref" : "SshKey" },
                "ImageId" : "ami-b66ed3de",
                "SecurityGroupIds" : [{ "Ref" : "TestInstanceSecurityGroup" }],
                "IamInstanceProfile" : { "Ref" : "TestInstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -ex\n",
                    "\n",
                    "# retry yum upgrade if it fails, otherwise keep going\n",
                    "if ! yum upgrade -y; then\n",
                    "  sleep 30\n",
                    "  yum upgrade -y || true\n",
                    "fi\n",
                    "\n",
                    "/opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" },
                    " -r TestHost --region ", { "Ref": "AWS::Region" }, "\n",
                    "\n",
                    "export artifact_bucket=", { "Ref" : "ArtifactBucket" }, "\n",
                    "export metadata_bucket=", { "Ref" : "MetaDataBucket" }, "\n",
                    "export key_bucket=", { "Ref" : "KeyBucket" }, "\n",
                    "export project=", { "Ref" : "Project" }, "\n",
                    "export ci_name=", { "Ref" : "CiName" }, "\n",
                    "export build_num=", { "Ref" : "BuildNum" }, "\n",
                    "export squadron_ref=", { "Ref" : "SquadronRef" }, "\n",
                    "export api_ref=", { "Ref" : "ApiRef" }, "\n",
                    "export scribe_ref=", { "Ref" : "ScribeRef" }, "\n",
                    "export dashboard_ref=", { "Ref" : "DashboardRef" }, "\n",
                    "\n",
                    "export aws_region=", { "Ref": "AWS::Region" }, "\n",
                    "export ssh_key=", { "Ref" : "SshKey" }, "\n",
                    "export promotably_stack=", { "Ref" : "AWS::StackName" }, "\n",
                    "export network_stack=", { "Ref" : "Network" }, "\n",
                    "export api_stack=", { "Ref" : "Api" }, "\n",
                    "export scribe_stack=", { "Ref" : "Scribe" }, "\n",
                    "export test_result_email=", { "Ref" : "TestResultsEmail" }, "\n",
                    "export auto_term=", { "Ref" : "AutoTermStack" }, "\n",
                    "\n",
                    "screen -d -m -L -S integration_tests /root/run_tests.sh\n",
                    "/opt/aws/bin/cfn-signal -e $? --region ",
                      { "Ref" : "AWS::Region" }, " ", { "Ref" : "InstanceWaitHandle" }, "\n",
                    "\n"
                ]]} },
                "Tags": [{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "testhost" ] ]} }]
            }
        },

        "TestHostEIPAssocation" : {
            "Type" : "AWS::EC2::EIPAssociation",
            "Properties" : {
                "EIP" : { "Ref" : "TestHostIPAddress" },
                "InstanceId" : { "Ref" : "TestHost" }
            }
        },

        "InstanceWait" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "TestHost",
            "Properties" : {
                "Handle" : { "Ref" : "InstanceWaitHandle" },
                "Timeout" : "900"
            }
        }
    },

    "Outputs" : {
        "TestHost" : {
            "Description" : "InstanceId of TestHost",
            "Value" : { "Ref" : "TestHost" }
        },
        "TestHostEIP" : {
            "Description" : "Public IP of TestHost",
            "Value" : { "Ref" : "TestHostIPAddress" }
        }
    }

}
