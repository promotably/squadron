{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "API cluster",

    "Parameters" : {

        "DashboardRef" : {
            "Description" : "Git ref of dashboard to refer to",
            "Type" : "String",
            "Default" : "latest"
        },
        "ArtifactBucket" : {
            "Description" : "S3 Bucket where build artifacts are stored",
            "Type" : "String",
            "Default" : "promotably-build-artifacts"
        },
        "ArtifactPath" : {
            "Description" : "Path in S3 bucket to standalone.jar, source.zip, apid",
            "Type" : "String"
        },
        "PublicSubnets" : {
            "Description" : "List of VPC public subnet IDs for the cluster. Note: must match up with the passed AvailabilityZones.",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "PrivateSubnets" : {
            "Description" : "List of VPC private subnet IDs for the cluster. Note: must match up with the passed AvailabilityZones.",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "VpcId" : {
            "Description" : "VPC associated with the provided subnets",
            "Type" : "AWS::EC2::VPC::Id"
        },
        "Environment" : {
            "Description" : "Environment tag",
            "Type" : "String",
            "Default" : "integration"
        },
        "VpcDefaultSecurityGroup" : {
            "Description" : "VPC default Security Group",
            "Type" : "AWS::EC2::SecurityGroup::Id"
        },
        "NATSecurityGroup" : {
            "Description" : "Security Group associated with NAT host",
            "Type" : "AWS::EC2::SecurityGroup::Id"
        },
        "KeyPair": {
            "Description": "Name of the keypair to use for SSH access",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "AvailabilityZones": {
            "Description" : "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Note: these must match up with the passed Subnets.",
            "Type" : "CommaDelimitedList",
            "Default" : ""
        },
        "RedisCluster" : {
            "Description" : "Name of Redis Cluster",
            "Type" : "String"
        },
        "RedisClientSecGrp" : {
            "Description" : "Name of Redis Cluster client security group",
            "Type" : "String"
        },
        "DBName": {
            "Description": "Database name",
            "Type": "String"
        },
        "DBHost": {
            "Description": "RDS Host",
            "Type": "String"
        },
        "DBPort": {
            "Description": "RDS Port",
            "Type": "String"
        },
        "DBUsername": {
            "Description": "Database username",
            "Type": "String"
        },
        "DBPassword": {
            "Description": "Database password",
            "Type": "String"
        },
        "DBClientSecGrp" : {
            "Description" : "Name of Redis Cluster client security group",
            "Type" : "String"
        },
        "KinesisStreamA" : {
            "Description" : "The name of the Kinesis Stream A",
            "Type" : "String"
        },
        "KinesisStreamB" : {
            "Description" : "The name of the Kinesis Stream B",
            "Type" : "String"
        },
        "DnsOverride" : {
            "Description" : "Override the Route53 record created for the ELB ('disable' for no record creation)",
            "Type" : "String",
            "Default" : "default"
        }
    },

    "Conditions" : {
        "UseAllAvailabilityZones" : { "Fn::Equals" : [{ "Fn::Join" : [ "", { "Ref" : "AvailabilityZones" } ]}, "" ]},
        "IsIntegration" : { "Fn::Equals" : [ { "Ref" : "Environment" }, "integration" ]},
        "CreateDns" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DnsOverride" }, "disable" ]} ]},
        "DnsOverride" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DnsOverride" }, "default" ]} ]}
    },

    "Mappings" : {
        "config" : {
            "us-east-1" : { "ami" : "ami-ee6e2a86" },
            "us-west-2" : { "ami" : "ami-c1c39af1" },
            "eu-west-2" : { "ami" : "ami-8723aef0" },

            "ssl" : { "name" : "wildcard-promotably.com-1423699200-2016-02-12" }
        }
    },

    "Resources" : {

        "RootRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "Path" : "/",
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Principal" : { "Service" : [ "ec2.amazonaws.com" ] },
                        "Action" : [ "sts:AssumeRole" ]
                    }]
                }
            }
        },

        "RolePolicies" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "root",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Action" : "kinesis:*",
                        "Resource" : { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisStreamA" } ]]}
                    },{
                        "Effect" : "Allow",
                        "Action" : "kinesis:*",
                        "Resource" : { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisStreamB" } ]]}
                    },{
                        "Effect": "Allow",
                        "Action": [ "s3:Get*" ],
                        "Resource": [
                            { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "ArtifactBucket" }, "/*" ] ] }
                        ]
                    },{
                        "Effect" : "Allow",
                        "Action" : "cloudwatch:*",
                        "Resource" : "*"
                    },{
                        "Effect" : "Allow",
                        "Action" : [ "elasticache:DescribeCacheClusters" ],
                        "Resource" : "*"
                    }]
                },
                "Roles" : [ { "Ref": "RootRole" } ]
            }
        },

        "RootInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ { "Ref": "RootRole" } ]
            }
        },

        "ELBSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "ELB " ] ]},
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp": "0.0.0.0/0" }
                ]
            }
        },

        "SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Ref" : "AWS::StackName" },
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "ELBSecurityGroup" } },
                    { "IpProtocol" : "tcp", "FromPort" : "3000", "ToPort" : "3000", "SourceSecurityGroupId" : { "Ref" : "ELBSecurityGroup" } }
                ]
            }
        },

        "LoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Subnets": { "Ref": "PublicSubnets" },
                "SecurityGroups": [{ "Ref": "ELBSecurityGroup" }],
                "Policies" : [{
                    "PolicyName" : "EnableProxyProtocol",
                    "PolicyType" : "ProxyProtocolPolicyType",
                    "Attributes" : [{
                        "Name"  : "ProxyProtocol",
                        "Value" : "true"
                    }],
                    "InstancePorts" : ["80"]
                }],
                "Listeners" : [{
                    "LoadBalancerPort" : "443",
                    "Protocol" : "SSL",
                    "InstancePort" : "80",
                    "InstanceProtocol" : "TCP",
                    "SSLCertificateId" : { "Fn::Join" : [ "", [
                        "arn:aws:iam::", { "Ref" : "AWS::AccountId" },
                        ":server-certificate/", { "Fn::FindInMap" : [ "config", "ssl", "name" ]}
                        ]]}
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:3000/health-check",
                    "HealthyThreshold": "3",
                    "UnhealthyThreshold": "3",
                    "Interval": "10",
                    "Timeout": "5"
                }
            }
        },

        "LaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "roleName" : { "Ref" : "RootRole" },
                        "buckets" : [ { "Ref" : "ArtifactBucket" } ]
                    }
                },
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "update" : [ "update" ],
                        "base" : [ "base" ],
                        "dbinit" : [ "dbinit" ],
                        "boot" : [ "boot" ],
                        "waitForHealthcheck" : [ "waitForHealthcheck" ],
                        "integration" : [ "integration" ],
                        "default" : [ { "ConfigSet" : "base" }, { "ConfigSet" : "dbinit" } ]
                    },
                    "base" : {
                        "packages" : {
                            "yum" : {
                                "java-1.7.0-openjdk" : [],
                                "nginx" : [],
                                "apache-commons-daemon-jsvc" : []
                            }
                        },
                        "files" : {
                            "/etc/nginx/conf.d/default.conf" : {
                                "content" : { "Fn::Join" : ["", [

                                    "log_format elb_log '$proxy_protocol_addr - $remote_user [$time_local] ' '\"$request\" $status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\"';\n",
                                    "\n\n",

                                    "upstream api {\n",
                                    "  server 127.0.0.1:3000 fail_timeout=0;\n",
                                    "}\n\n",

                                    "server {\n",
                                    "  listen 80 proxy_protocol;\n",
                                    "  listen [::]:80 default proxy_protocol ipv6only=on;\n",
                                    "  charset utf-8;\n",
                                    "  access_log /var/log/nginx/elb-access.log elb_log;\n",
                                    "  # set_real_ip_from 172.31.0.0/20;\n",
                                    "  # real_ip_header proxy_protocol;\n",

                                    "  location / {\n",
                                    "    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n",
                                    "    proxy_set_header Host $http_host;\n",
                                    "    proxy_redirect off;\n\n",

                                    "    if (!-f $request_filename) {\n",
                                    "      proxy_pass http://api;\n",
                                    "      break;\n",
                                    "    }\n",
                                    "  }\n",
                                    "}\n"
                                ] ]},
                                "mode"   : "000644",
                                "owner"  : "root",
                                "group"  : "root"
                            },
                            "/opt/promotably/api-current.jar" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "ArtifactPath" }, "/standalone.jar" ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/rc.d/init.d/apid" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "ArtifactPath" }, "/apid" ]]},
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/opt/promotably/api.conf" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "{\n",
                                    "\"ARTIFACT_BUCKET\" \"{{ARTIFACT_BUCKET}}\"\n",
                                    "\"DASHBOARD_INDEX_PATH\" \"db/{{DASHBOARD_REF}}/index.html\"\n",
                                    "\"KINESIS_A\" \"{{KINESIS_A}}\"\n",
                                    "\"KINESIS_B\" \"{{KINESIS_B}}\"\n",
                                    "\"REDIS_HOST\" \"localhost\"\n",
                                    "\"REDIS_PORT\" \"6379\"\n",
                                    "\"RDS_HOST\" \"{{RDS_HOST}}\"\n",
                                    "\"RDS_PORT\" \"{{RDS_PORT}}\"\n",
                                    "\"RDS_USER\" \"{{RDS_USER}}\"\n",
                                    "\"RDS_PW\" \"{{RDS_PW}}\"\n",
                                    "\"RDS_DB_NAME\" \"{{RDS_DB_NAME}}\"\n",
                                    "\"ENV\" \"{{ENV}}\"\n",
                                    "\"LEIN_ROOT\" \"yes\"\n",
                                    "\"STACKNAME\" \"{{STACKNAME}}\"\n",
                                    "}\n"
                                ]]},
                                "context" : {
                                    "ARTIFACT_BUCKET" : { "Ref": "ArtifactBucket" },
                                    "DASHBOARD_REF" : { "Ref": "DashboardRef" },
                                    "KINESIS_A" : { "Ref": "KinesisStreamA" },
                                    "KINESIS_B" : { "Ref": "KinesisStreamB" },
                                    "RDS_HOST" : { "Ref" : "DBHost" },
                                    "RDS_PORT" : { "Ref" : "DBPort" },
                                    "RDS_USER" : { "Ref": "DBUsername" },
                                    "RDS_PW" : { "Ref": "DBPassword" },
                                    "RDS_DB_NAME" : { "Ref": "DBName" },
                                    "ENV" : { "Ref": "Environment" },
                                    "STACKNAME" : { "Ref": "AWS::StackName" }
                                },
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/usr/local/bin/get_cluster_config" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "#! /bin/bash\n",
                                    "cache_host=$(aws elasticache describe-cache-clusters --output=text",
                                      " --cache-cluster-id ", { "Ref" : "RedisCluster" },
                                      " --show-cache-node-info --region ", { "Ref" : "AWS::Region" },
                                      " --query 'CacheClusters[0].CacheNodes[0].Endpoint.Address'",
                                      ")\n",
                                    "cache_port=$(aws elasticache describe-cache-clusters --output=text",
                                      " --cache-cluster-id ", { "Ref" : "RedisCluster" },
                                      " --show-cache-node-info --region ", { "Ref" : "AWS::Region" },
                                      " --query 'CacheClusters[0].CacheNodes[0].Endpoint.Port'",
                                      ")\n",
                                      "sed -i \"s/^\\\"REDIS_HOST\\\" .*$/\\\"REDIS_HOST\\\" \\\"$cache_host\\\"/\" /opt/promotably/api.conf\n",
                                      "sed -i \"s/^\\\"REDIS_PORT\\\" .*$/\\\"REDIS_PORT\\\" \\\"$cache_port\\\"/\" /opt/promotably/api.conf\n"
                                ] ]},
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/cfn-hup.conf" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                    "region=", { "Ref" : "AWS::Region" }, "\n"
                                ] ]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                "content": { "Fn::Join" : [ "", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                      " --stack ", { "Ref" : "AWS::StackName" },
                                      " --resource LaunchConfig",
                                      " --region ", { "Ref" : "AWS::Region" },
                                      " -c base,update,waitForHealthcheck\n",
                                    "runas=root\n"
                                ] ]}
                            }
                        },
                        "commands" : {
                            "01-get-cluster-config" : { "command" : "/usr/local/bin/get_cluster_config" },
                            "02-apidchkconfig" : { "command" : "chkconfig --add apid" }
                        }
                    },
                    "dbinit" : {
                        "packages" : {
                            "yum" : {
                                "postgresql93" : []
                            }
                        },
                        "files" : {
                            "/tmp/postgres_setup.sql" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "CREATE USER ", {"Ref": "DBUsername"}, " WITH PASSWORD '", {"Ref": "DBPassword"}, "';\n",
                                    "CREATE DATABASE ", {"Ref": "DBName"}, ";\n",
                                    "GRANT ALL PRIVILEGES ON DATABASE ", {"Ref": "DBName"}, " to ", {"Ref": "DBUsername"}, ";\n",
                                    "\\c ", {"Ref": "DBName"}, "\n",
                                    "CREATE EXTENSION \"uuid-ossp\";\n",
                                    "CREATE TABLE IF NOT EXISTS migrations(version varchar(255));\n",
                                    "GRANT ALL PRIVILEGES ON TABLE migrations TO ", {"Ref": "DBUsername"}, ";\n"
                                ] ]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        },
                        "commands" : {
                            "01-postgres-setup" : {
                                "env" : { "PGPASSWORD" : {"Ref": "DBPassword"} },
                                "command" : { "Fn::Join": [ "", [
                                    "psql -f /tmp/postgres_setup.sql -h ",
                                    { "Ref" : "DBHost" }, " -p ",
                                    { "Ref" : "DBPort" }, " -U ", {"Ref": "DBUsername"}, "\n"
                                ] ]}
                            }
                        }
                    },
                    "integration" : {
                        "packages" : {
                            "yum" : {
                                "git" : []
                            }
                        },
                        "files" : {
                            "/opt/promotably/api.zip" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "ArtifactPath" }, "/source.zip" ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/opt/promotably/api-integration-test.sh" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "#!/bin/bash -ex\n",
                                    "\n",
                                    "export ARTIFACT_BUCKET=\"{{ARTIFACT_BUCKET}}\"\n",
                                    "export DASHBOARD_INDEX_PATH=\"db/{{DASHBOARD_REF}}/index.html\"\n",
                                    "export KINESIS_A=\"{{KINESIS_A}}\"\n",
                                    "export KINESIS_B=\"{{KINESIS_B}}\"\n",
                                    "export REDIS_HOST=\"localhost\"\n",
                                    "export REDIS_PORT=\"6379\"\n",
                                    "export RDS_HOST=\"{{RDS_HOST}}\"\n",
                                    "export RDS_PORT=\"{{RDS_PORT}}\"\n",
                                    "export RDS_USER=\"{{RDS_USER}}\"\n",
                                    "export RDS_PW=\"{{RDS_PW}}\"\n",
                                    "export RDS_DB_NAME=\"{{RDS_DB_NAME}}\"\n",
                                    "export ENV=\"{{ENV}}\"\n",
                                    "export LEIN_ROOT=\"yes\"\n",
                                    "export MIDJE_COLORIZE=\"false\"\n",
                                    "export STACKNAME=\"{{STACKNAME}}\"\n",
                                    "export REDIS_HOST=\"$(aws elasticache describe-cache-clusters ",
                                      " --output=text",
                                      " --cache-cluster-id ", { "Ref" : "RedisCluster" },
                                      " --show-cache-node-info --region ", { "Ref" : "AWS::Region" },
                                      " --query 'CacheClusters[0].CacheNodes[0].Endpoint.Address'",
                                      ")\"\n",
                                    "export REDIS_PORT=\"$(aws elasticache describe-cache-clusters ",
                                      " --output=text",
                                      " --cache-cluster-id ", { "Ref" : "RedisCluster" },
                                      " --show-cache-node-info --region ", { "Ref" : "AWS::Region" },
                                      " --query 'CacheClusters[0].CacheNodes[0].Endpoint.Port'",
                                      ")\"\n",
                                    "\n",
                                    "/usr/local/bin/lein deps > /dev/null 2>&1\n",
                                    "/usr/local/bin/lein midje api.integration.*\n"
                                ]]},
                                "context" : {
                                    "ARTIFACT_BUCKET" : { "Ref": "ArtifactBucket" },
                                    "DASHBOARD_REF" : { "Ref": "DashboardRef" },
                                    "KINESIS_A" : { "Ref": "KinesisStreamA" },
                                    "KINESIS_B" : { "Ref": "KinesisStreamB" },
                                    "RDS_HOST" : { "Ref" : "DBHost" },
                                    "RDS_PORT" : { "Ref" : "DBPort" },
                                    "RDS_USER" : { "Ref": "DBUsername" },
                                    "RDS_PW" : { "Ref": "DBPassword" },
                                    "RDS_DB_NAME" : { "Ref": "DBName" },
                                    "ENV" : { "Ref": "Environment" },
                                    "STACKNAME" : { "Ref": "AWS::StackName" }
                                },
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        },
                        "commands" : {
                            "00-integration-prep" :{
                                "cwd" : "/opt/promotably",
                                "ignoreErrors" : "false",
                                "command" : { "Fn::Join" : [ "", [
                                    "\n",
                                    "curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > /usr/local/bin/lein\n",
                                    "chmod 0755 /usr/local/bin/lein\n",
                                    "rm -rf api\n",
                                    "mkdir api\n",
                                    "cd api\n",
                                    "unzip ../api.zip\n"
                                ]]}
                            }
                        }
                    },
                    "boot" : {
                        "services" : {
                            "sysvinit" : {
                                "nginx" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : [ "/etc/nginx/conf.d/default.conf" ],
                                    "sources" : [ "/var/www/html" ]
                                },
                                "apid" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : [ "/opt/promotably/api.conf", "/opt/promotably/api-current.jar" ]
                                },
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : [ "/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf" ]
                                }
                            }
                        }
                    },
                    "update" : {
                        "commands" : {
                            "01-restartservices" : {
                                "command" : { "Fn::Join" : [ "", [
                                    "service nginx restart\n",
                                    "service apid restart\n"
                                ]]}
                            }
                        }
                    },
                    "waitForHealthcheck" : {
                        "commands" : {
                            "01-wait" : {
                                "command" : { "Fn::Join" : [ "", [
                                    "timeout_ts=$((`date +%s` + 600))\n",
                                    "curl_cmd=\"curl -v --connect-timeout 10 --max-time 15 http://localhost:3000/health-check\"\n",
                                    "while [ $(date +%s) -le $timeout_ts ] && sleep 10; do\n",
                                    "  if $curl_cmd | grep -q \"I'm here\"; then\n",
                                    "    exit 0\n",
                                    "  fi\n",
                                    "done\n",
                                    "exit 1\n"
                                ]]}
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "ami" ]},
                "SecurityGroups" : [{ "Ref" : "SecurityGroup" }, { "Ref" : "VpcDefaultSecurityGroup" },
                                    { "Ref" : "RedisClientSecGrp" }, { "Ref" : "DBClientSecGrp" }],
                "InstanceType" : "t2.small",
                "KeyName": { "Ref": "KeyPair" },
                "IamInstanceProfile": { "Ref": "RootInstanceProfile" },
                "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
                    "#!/bin/bash -ex\n",
                    "\n",
                    "# retry yum upgrade if it fails, otherwise keep going\n",
                    "if ! yum upgrade -y; then\n",
                    "  sleep 30\n",
                    "  yum upgrade -y || true\n",
                    "fi\n",
                    "\n",
                    "mkdir -p /opt/promotably/api\n",
                    "\n",
                    "# Helper functions\n",
                    "function error_exit\n",
                    "{\n",
                    "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\"",
                      " --stack ", { "Ref" : "AWS::StackName" },
                      " --resource LaunchGroup ",
                      " --region ", { "Ref" : "AWS::Region" }, "\n",
                    "  exit 1\n",
                    "}\n",
                    "function cfn_init\n",
                    "{\n",
                    "  /opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" },
                      " -r LaunchConfig --region ", { "Ref": "AWS::Region" },
                      " \"$@\"\n",
                    "}\n",
                    "function cfn_signal_ok\n",
                    "{\n",
                    "  /opt/aws/bin/cfn-signal -e 0 ",
                      " --stack ", { "Ref" : "AWS::StackName" },
                      " --resource LaunchGroup ",
                      " --region ", { "Ref" : "AWS::Region" }, " || true\n",
                    "}\n",
                    "\n",
                    "# Wrap this stuff so it runs in the backgroun\n",
                    "((\n",
                    "  cfn_init -c default || error_exit 'Failed to run cfn-init - default'\n",
                    "\n",
                    "  if [ '", { "Ref": "Environment" }, "' = 'integration' ]; then\n",
                    "    cfn_init -c integration || error_exit 'Failed to run cfn-init - integration'\n",
                    "  else\n",
                    "\n",
                    "    cfn_init -c boot || error_exit 'Failed to run cfn-init - boot'\n",
                    "    cfn_init -c waitForHealthcheck || error_exit 'Failed to run cfn-init - waitForHealthcheck'\n",
                    "  fi\n",
                    "  cfn_signal_ok\n",
                    ") > /tmp/cloud-init-bg.out 2>&1 ) &\n"
                ] ]} }
            }
        },

        "LaunchGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "CreationPolicy": {
                "ResourceSignal": { "Count": "1", "Timeout": "PT15M" }
            },
            "UpdatePolicy" : {
                "AutoScalingRollingUpdate" : {
                    "MinInstancesInService" : "1",
                    "MaxBatchSize" : "1",
                    "PauseTime" : "PT15M",
                    "WaitOnResourceSignals" : "true"
                }
            },
            "Properties" : {
                "AvailabilityZones" : { "Fn::If" : [ "UseAllAvailabilityZones",
                    { "Fn::GetAZs": "AWS::Region" },
                    { "Ref" : "AvailabilityZones" }
                ] },
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "MinSize" : "1",
                "MaxSize" : "2",
                "DesiredCapacity" : 1,
                "HealthCheckGracePeriod" : "300",
                "Cooldown" : "600",
                "VPCZoneIdentifier" : { "Ref" : "PrivateSubnets" },
                "LoadBalancerNames" : [ { "Ref" : "LoadBalancer" } ],
                "HealthCheckType" : { "Fn::If" : [ "IsIntegration", "EC2", "ELB" ]},
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" }, "PropagateAtLaunch" : "true" },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" }, "PropagateAtLaunch" : "true" }]
            }
        },

        "ElbDnsRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Condition" : "CreateDns",
            "Properties" : {
                "HostedZoneName" : "promotably.com.",
                "Name" : { "Fn::Join" : [ "", [
                    { "Fn::If" : [ "DnsOverride", { "Ref" : "DnsOverride" }, { "Ref" : "AWS::StackName" } ]},
                    ".promotably.com."
                ]]},
                "Type" : "A",
                "AliasTarget" : {
                    "DNSName" : { "Fn::GetAtt": [ "LoadBalancer", "DNSName" ] },
                    "EvaluateTargetHealth" : "true",
                    "HostedZoneId" : { "Fn::GetAtt": [ "LoadBalancer", "CanonicalHostedZoneNameID" ] }
                }
            }
        }
    },

    "Outputs" : {

        "APIInstanceGroup" : {
            "Description" : "ASG of the API servers",
            "Value" : { "Ref" : "LaunchGroup" }
        },
        "URL": {
            "Description": "URL for testing",
            "Value": { "Fn::If" : [ "CreateDns",
                { "Fn::Join" : [ "", [ "https://", { "Ref" : "ElbDnsRecord" }, ".promotably.com" ]]},
                { "Fn::Join" : [ "", [ "https://", { "Fn::GetAtt": [ "LoadBalancer", "DNSName" ] } ]]}
            ]}
        }
    }
}
