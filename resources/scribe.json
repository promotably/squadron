{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Scribe",

    "Parameters" : {

        "TestResultsBucket" : {
            "Description" : "S3 Bucket where test runs are stored",
            "Type" : "String",
            "Default" : "promotably-test-results"
        },
        "TestResultsSNSTopicARN" : {
            "Description" : "SNS Topic ARN for reporting test results",
            "Type" : "String"
        },
        "ArtifactBucket" : {
            "Description" : "S3 Bucket where build artifacts are stored",
            "Type" : "String",
            "Default" : "promotably-build-artifacts"
        },
        "SourceZip" : {
            "Description" : "Filename of API source",
            "Type" : "String"
        },
        "DBHost": {
            "Description": "Database hostname",
            "Type": "String"
        },
        "DBPort": {
            "Description": "Database port",
            "Type": "String"
        },
        "DBName": {
            "Description": "Database name",
            "Type": "String"
        },
        "DBUsername": {
            "Description": "Database username",
            "Type": "String"
        },
        "DBPassword": {
            "Description": "Database password",
            "Type": "String"
        },
        "KinesisStreamA" : {
            "Description" : "The name of the Kinesis Stream. This was autogenerated by the Kinesis Resource named 'KinesisStreamA'",
            "Type" : "String"
        },
        "KinesisStreamB" : {
            "Description" : "The name of the Kinesis Stream. This was autogenerated by the Kinesis Resource named 'KinesisStreamB'",
            "Type" : "String"
        },
        "PublicSubnetId" : {
            "Description" : "VPC public subnet ID for scribe host.",
            "Type" : "AWS::EC2::Subnet::Id"
        },
        "VpcId" : {
            "Description" : "VPC associated with the provided subnets",
            "Type" : "AWS::EC2::VPC::Id"
        },
        "Environment" : {
            "Description" : "Environment tag",
            "Type" : "String",
            "Default" : "integration"
        },
        "VpcDefaultSecurityGroup" : {
            "Description" : "VPC default Security Group",
            "Type" : "AWS::EC2::SecurityGroup::Id"
        },
        "KeyPair": {
            "Description": "Name of the keypair to use for SSH access",
            "Type": "AWS::EC2::KeyPair::KeyName"
        }
    },

    "Resources" : {

        "RootRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement" : [ {
                        "Effect" : "Allow",
                        "Principal" : {
                            "Service" : [ "ec2.amazonaws.com" ]
                        },
                        "Action" : [ "sts:AssumeRole" ]
                    } ]
                },
                "Path" : "/"
            }
        },

        "RolePolicies" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "Roles" : [{ "Ref": "RootRole" }],
                "PolicyName" : "root",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Action" : "kinesis:*",
                        "Resource" : { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisStreamA" } ]]}
                    },{
                        "Effect" : "Allow",
                        "Action" : "kinesis:*",
                        "Resource" : { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisStreamB" } ]]}
                    },{
                        "Effect" : "Allow",
                        "Action" : "cloudwatch:*",
                        "Resource" : "*"
                    },{
                        "Effect": "Allow",
                        "Action": [ "sns:ListTopics", "sns:Publish" ],
                        "Resource": "*"
                    },{
                        "Effect": "Allow",
                        "Action": [ "s3:Get*", "s3:List*", "s3:Put*" ],
                        "Resource": [
                            { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "TestResultsBucket" }, "/*" ] ] },
                            { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "ArtifactBucket" }, "/*" ] ] }
                        ]
                    },{
                        "Effect" : "Allow",
                        "Action" : "dynamodb:*",
                        "Resource" : "*"
                    }]
                }
            }
        },

        "RootInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ { "Ref": "RootRole" } ]
            }
        },

        "ScribeSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription" : { "Ref" : "AWS::StackName" },
                "VpcId" : { "Ref" : "VpcId" }
            }
        },

        "ScribeInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "ec2-net-utils": [],
                                "java-1.7.0-openjdk" : [],
                                "git" : []
                            }
                        },
                        "files" : {
                            "/etc/cron.d/get_iam_config" : {
                                "content" : "*/5 * * * * root /usr/local/bin/get_iam_config",
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/usr/local/bin/get_iam_config" : {
                                "content" : { "Fn::Join" : ["", [
                                    "#! /bin/bash\n",
                                    "export ROLE=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/)\n",
                                    "curl http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE > /tmp/iamconfig\n"
                                ]]},
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/cfn-hup.conf" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                    "region=", { "Ref" : "AWS::Region" }, "\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                "content": { "Fn::Join" : ["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.ScribeInstance.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                    "         --stack ", { "Ref" : "AWS::StackName" },
                                    "         --resource ScribeInstance ",
                                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                                    "runas=root\n"
                                ]]}
                            }
                        },
                        "commands" : {
                            "01-get-iam-config" : {
                                "command" : "/usr/local/bin/get_iam_config"
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "KeyName": { "Ref": "KeyPair" },
                "ImageId" : "ami-b66ed3de",
                "InstanceType" : "t2.micro",
                "IamInstanceProfile": { "Ref": "RootInstanceProfile" },
                "NetworkInterfaces" : [{ "AssociatePublicIpAddress" : true,
                                         "DeviceIndex": 0,
                                         "GroupSet": [{ "Ref": "ScribeSecurityGroup" }, { "Ref" : "VpcDefaultSecurityGroup" }],
                                         "SubnetId" : { "Ref" : "PublicSubnetId" } }],
                "UserData": {
                    "Fn::Base64": { "Fn::Join": [ "", [
                        "#!/bin/bash -ex\n",

                        "export ARTIFACT_BUCKET=", {"Ref": "ArtifactBucket"}, "\n",

                        "yum update -y aws-cfn-bootstrap\n",
                        "yum update -y curl\n",
                        "yum install ec2-net-utils -y\n",
                        "yum update -y aws-cli\n",
                        "yum install -y jsvc\n",

                        "# Setup tasks\n",
                        "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r ScribeInstance ",
                          " --region ", { "Ref" : "AWS::Region" }, "\n",

                        "# Get Scribe source\n",
                        "mkdir -p /opt/promotably/scribe\n",
                        "aws s3 cp s3://$ARTIFACT_BUCKET/", { "Ref" : "SourceZip" }, " /tmp/scribe.zip\n",
                        "cd /opt/promotably/scribe\n",
                        "unzip /tmp/scribe.zip\n",

                        "# Get build artifacts\n\n",
                        "",
                        "aws s3 cp 's3://", { "Ref" : "ArtifactBucket" }, "/scribed' /etc/init.d\n",
                        "chmod 000755 /etc/init.d/scribed\n",
                        "chkconfig --add scribed\n",

                        "# Install lein\n",
                        "curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > /usr/local/bin/lein\n",
                        "chmod a+x /usr/local/bin/lein\n",

                        "# Create config\n",
                        "",
                        "echo '{' > /opt/promotably/scribe.conf\n",
                        "echo \\\"ARTIFACT_BUCKET\\\"          \\\"", {"Ref": "ArtifactBucket"}, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"KINESIS_A\\\"                \\\"", {"Ref": "KinesisStreamA"}, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"KINESIS_B\\\"                \\\"", {"Ref": "KinesisStreamB"}, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"RDS_HOST\\\"                 \\\"", {"Ref": "DBHost"}, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"RDS_PORT\\\"                 \\\"", {"Ref": "DBPort"}, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"RDS_USER\\\"                 \\\"", {"Ref": "DBUsername"}, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"RDS_PW\\\"                   \\\"", {"Ref": "DBPassword"}, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"RDS_DB_NAME\\\"              \\\"", {"Ref": "DBName"}, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"ENV\\\"                      \\\"", {"Ref": "Environment"}, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"LEIN_ROOT\\\"                \\\"yes\\\" >> /opt/promotably/scribe.conf\n",
                        "echo \\\"STACKNAME\\\"                \\\"", { "Ref": "AWS::StackName" }, "\\\" >> /opt/promotably/scribe.conf\n",
                        "echo '}' >> /opt/promotably/scribe.conf\n",

                        "export KINESIS_A=", {"Ref": "KinesisStreamA"}, "\n",
                        "export KINESIS_B=", {"Ref": "KinesisStreamB"}, "\n",
                        "export RDS_HOST=", {"Ref": "DBHost"}, "\n",
                        "export RDS_PORT=", {"Ref": "DBPort"}, "\n",
                        "export RDS_USER=", {"Ref": "DBUsername"}, "\n",
                        "export RDS_PW=", {"Ref": "DBPassword"}, "\n",
                        "export RDS_DB_NAME=", {"Ref": "DBName"}, "\n",
                        "export ENV=", {"Ref": "Environment"}, "\n",
                        "export LEIN_ROOT=yes\n",
                        "export STACKNAME=", { "Ref": "AWS::StackName" }, "\n",

                        "# Build uberjar\n",
                        "",
                        "cd /opt/promotably/scribe && /usr/local/bin/lein uberjar\n",
                        "cp /opt/promotably/scribe/target/scribe*standalone.jar /opt/promotably/scribe-current.jar\n",

                        "# Run Scribe\n",
                        "if [ \"$ENV\" == 'integration' ]; then\n",
                        "   #aws s3 cp s3://$ARTIFACT_BUCKET/", { "Ref" : "SourceZip" }, " /tmp/scribe.zip\n",
                        "   #cd /opt/promotably/scribe\n",
                        "   #unzip /tmp/scribe.zip\n",
                        "   export MIDJE_COLORIZE=false\n",
                        "   echo SCRIBE INTEGRATION TEST RESULTS > /tmp/scribe_test_output.txt\n",
                        "   cd /opt/promotably/scribe && /usr/local/bin/lein midje scribe.integration.*",
                        "     2>&1 >> /tmp/scribe_test_output.txt\n",
                        "   aws s3 cp /tmp/scribe_test_output.txt 's3://", { "Ref" : "TestResultsBucket" }, "/",
                          { "Ref" : "AWS::StackName" }, "_scribe.txt'", " --acl public-read\n",
                        "   aws sns publish  --region ", { "Ref": "AWS::Region" },
                          " --topic-arn ", {"Ref": "TestResultsSNSTopicARN"},
                          " --message 'https://s3.amazonaws.com/", { "Ref" : "TestResultsBucket" },
                          "/", { "Ref" : "AWS::StackName" }, "_scribe.txt'\n",
                        "fi\n\n",
                        "service scribed start\n",

                        "# Signal the status of cfn-init\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        "         --stack ", { "Ref" : "AWS::StackName" },
                        "         --resource ScribeInstance ",
                        "         --region ", { "Ref" : "AWS::Region" }, "\n"
                    ] ]}
                },
                "Tags": [{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "scribe" ] ]} }]
            }
        }
    },

    "Outputs" : {

        "URL": {
            "Description": "URL for testing",
            "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "ScribeInstance", "PublicDnsName" ] } ] ]}
        }
    }
}
