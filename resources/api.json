{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "API cluster",

    "Parameters" : {

        "DashboardRef" : {
            "Description" : "Git ref of dashboard to refer to",
            "Type" : "String",
            "Default" : "latest"
        },
        "ArtifactName" : {
            "Description" : "Filename of build API build jar",
            "Type" : "String"
        },
        "SourceZip" : {
            "Description" : "Filename of API source",
            "Type" : "String"
        },
        "ArtifactBucket" : {
            "Description" : "S3 Bucket where build artifacts are stored",
            "Type" : "String",
            "Default" : "promotably-build-artifacts"
        },
        "TestResultsBucket" : {
            "Description" : "S3 Bucket where test runs are stored",
            "Type" : "String",
            "Default" : "promotably-test-results"
        },
        "TestResultsSNSTopicARN" : {
            "Description" : "SNS Topic ARN for reporting test results",
            "Type" : "String"
        },
        "PublicSubnets" : {
            "Description" : "List of VPC public subnet IDs for the cluster. Note: must match up with the passed AvailabilityZones.",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "PrivateSubnets" : {
            "Description" : "List of VPC private subnet IDs for the cluster. Note: must match up with the passed AvailabilityZones.",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "VpcId" : {
            "Description" : "VPC associated with the provided subnets",
            "Type" : "AWS::EC2::VPC::Id"
        },
        "Environment" : {
            "Description" : "Environment tag",
            "Type" : "String",
            "Default" : "integration"
        },
        "Role" : {
            "Description" : "Role tag",
            "Type" : "String",
            "Default" : "api"
        },
        "VpcDefaultSecurityGroup" : {
            "Description" : "VPC default Security Group",
            "Type" : "AWS::EC2::SecurityGroup::Id"
        },
        "NATSecurityGroup" : {
            "Description" : "Security Group associated with NAT host",
            "Type" : "AWS::EC2::SecurityGroup::Id"
        },
        "KeyPair": {
            "Description": "Name of the keypair to use for SSH access",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "AvailabilityZones": {
            "Description" : "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Note: these must match up with the passed Subnets.",
            "Type" : "CommaDelimitedList",
            "Default" : ""
        },
        "DBName": {
            "Description": "Database name",
            "Type": "String"
        },
        "DBUsername": {
            "Description": "Database username",
            "Type": "String"
        },
        "DBPassword": {
            "Description": "Database password",
            "Type": "String"
        },
        "DBClass": {
            "Description": "Database instance class",
            "Type": "String"
        },
        "DBAllocatedStorage": {
            "Description": "Database allocated storage",
            "Type": "String"
        }
    },

    "Conditions" : {
        "UseAllAvailabilityZones" : { "Fn::Equals" : [{ "Fn::Join" : [ "", { "Ref" : "AvailabilityZones" } ]}, "" ]}
    },

    "Resources" : {

        "ElasticacheSubnetGroup" : {
            "Type" : "AWS::ElastiCache::SubnetGroup",
            "Properties" : {
                "Description" : "Cache Subnet Group",
                "SubnetIds" : { "Ref" : "PrivateSubnets" }
            }
        },

        "ElasticacheSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " Redis Cluster" ] ]},
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "6379",
                    "ToPort": "6379",
                    "SourceSecurityGroupId": { "Ref": "APIServerSecurityGroup" }
                }]
            }
        },

        "RedisCluster": {
            "Type": "AWS::ElastiCache::CacheCluster",
            "Properties": {
                "AutoMinorVersionUpgrade": "true",
                "Engine": "redis",
                "CacheNodeType": "cache.m1.small",
                "NumCacheNodes": "1",
                "CacheSubnetGroupName": { "Ref": "ElasticacheSubnetGroup" },
                "VpcSecurityGroupIds": [{"Fn::GetAtt": [ "ElasticacheSecurityGroup", "GroupId"]}]
            }
        },

        "DBSubnetGroup" : {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "DBSubnetGroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " RDS" ] ]},
                "SubnetIds" : { "Ref" : "PrivateSubnets" },
                "Tags": [{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "dbsubetnetgroup" ] ]} }]
            }
        },

        "DBInstance" : {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName"            : { "Ref" : "DBName" },
                "Engine"            : "postgres",
                "MasterUsername"    : { "Ref" : "DBUsername" },
                "MasterUserPassword": { "Ref" : "DBPassword" },
                "DBInstanceClass"   : { "Ref" : "DBClass" },
                "DBSecurityGroups"  : [{ "Ref" : "DBSecurityGroup" }],
                "AllocatedStorage"  : { "Ref" : "DBAllocatedStorage" },
                "DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" }
            }
        },

        "DBSecurityGroup": {
            "Type": "AWS::RDS::DBSecurityGroup",
            "Properties": {
                "EC2VpcId" : { "Ref" : "VpcId" },
                "DBSecurityGroupIngress": { "EC2SecurityGroupId": { "Ref": "APIServerSecurityGroup" } },
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " api" ] ]}
            }
        },

        "KinesisStreamA" : {
            "Type" : "AWS::Kinesis::Stream",
            "Properties" : {
                "ShardCount" : "2"
            }
        },

        "KinesisStreamB" : {
            "Type" : "AWS::Kinesis::Stream",
            "Properties" : {
                "ShardCount" : "2"
            }
        },

        "RootRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "Path" : "/",
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Principal" : { "Service" : [ "ec2.amazonaws.com" ] },
                        "Action" : [ "sts:AssumeRole" ]
                    }]
                }
            }
        },

        "RolePolicies" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "root",
                "PolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Action" : "kinesis:*",
                        "Resource" : { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisStreamA" } ]]}
                    },{
                        "Effect" : "Allow",
                        "Action" : "kinesis:*",
                        "Resource" : { "Fn::Join" : [ "", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisStreamB" } ]]}
                    },{
                        "Effect": "Allow",
                        "Action": [ "sns:ListTopics", "sns:Publish" ],
                        "Resource": "*"
                    },{
                        "Effect": "Allow",
                        "Action": [ "s3:Get*", "s3:List*", "s3:Put*" ],
                        "Resource": [
                            { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "TestResultsBucket" }, "/*" ] ] },
                            { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "ArtifactBucket" }, "/*" ] ] }
                        ]
                    },{
                        "Effect" : "Allow",
                        "Action" : "cloudwatch:*",
                        "Resource" : "*"
                    },{
                        "Effect" : "Allow",
                        "Action" : [ "elasticache:DescribeCacheClusters" ],
                        "Resource" : "*"
                    }]
                },
                "Roles" : [ { "Ref": "RootRole" } ]
            }
        },

        "RootInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ { "Ref": "RootRole" } ]
            }
        },

        "ClientSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " api ELB clients" ] ]},
                "VpcId" : { "Ref" : "VpcId" }
            }
        },

        "LbSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " api ELB " ] ]},
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "ClientSecurityGroup"} },
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp": "0.0.0.0/0" }
                ]
            }
        },

        "APIServerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " api" ] ]},
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup" } }
                ]
            }
        },

        "APILoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Subnets": { "Ref": "PublicSubnets" },
                "SecurityGroups": [{ "Ref": "LbSecurityGroup" }],
                "Policies" : [{
                    "PolicyName" : "EnableProxyProtocol",
                    "PolicyType" : "ProxyProtocolPolicyType",
                    "Attributes" : [{
                        "Name"  : "ProxyProtocol",
                        "Value" : "true"
                    }],
                    "InstancePorts" : ["80"]
                }],
                "Listeners" : [{
                    "LoadBalancerPort" : "80",
                    "InstancePort" : "80",
                    "Protocol" : "TCP",
                    "InstanceProtocol" : "TCP"
                }]
            }
        },

        "LaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "roleName" : { "Ref" : "RootRole" },
                        "buckets" : [ { "Ref" : "ArtifactBucket" } ]
                    }
                },
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "update" : [ "update" ],
                        "base" : [ "base" ],
                        "dbinit" : [ "dbinit" ],
                        "boot" : [ "boot" ],
                        "integration" : [ "integration" ],
                        "default" : [ { "ConfigSet" : "base" }, "dbinit" ]
                    },
                    "base" : {
                        "packages" : {
                            "yum" : {
                                "java-1.7.0-openjdk" : [],
                                "nginx" : [],
                                "apache-commons-daemon-jsvc" : []
                            }
                        },
                        "files" : {
                            "/etc/nginx/conf.d/default.conf" : {
                                "content" : { "Fn::Join" : ["", [

                                    "log_format elb_log '$proxy_protocol_addr - $remote_user [$time_local] ' '\"$request\" $status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\"';\n",
                                    "\n\n",

                                    "upstream api {\n",
                                    "  server 127.0.0.1:3000 fail_timeout=0;\n",
                                    "}\n\n",

                                    "server {\n",
                                    "  listen 80 proxy_protocol;\n",
                                    "  listen [::]:80 default proxy_protocol ipv6only=on;\n",
                                    "  charset utf-8;\n",
                                    "  access_log /var/log/nginx/elb-access.log elb_log;\n",
                                    "  # set_real_ip_from 172.31.0.0/20;\n",
                                    "  # real_ip_header proxy_protocol;\n",

                                    "  location / {\n",
                                    "    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n",
                                    "    proxy_set_header Host $http_host;\n",
                                    "    proxy_redirect off;\n\n",

                                    "    if (!-f $request_filename) {\n",
                                    "      proxy_pass http://api;\n",
                                    "      break;\n",
                                    "    }\n",
                                    "  }\n",
                                    "}\n"
                                ] ]},
                                "mode"   : "000644",
                                "owner"  : "root",
                                "group"  : "root"
                            },
                            "/opt/promotably/api-current.jar" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "ArtifactName" } ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/rc.d/init.d/apid" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/apid" ]]},
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/opt/promotably/api.conf" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "{\n",
                                    "\"ARTIFACT_BUCKET\" \"{{ARTIFACT_BUCKET}}\"\n",
                                    "\"DASHBOARD_INDEX_PATH\" \"db/{{DASHBOARD_REF}}/index.html\"\n",
                                    "\"KINESIS_A\" \"{{KINESIS_A}}\"\n",
                                    "\"KINESIS_B\" \"{{KINESIS_B}}\"\n",
                                    "\"REDIS_HOST\" \"localhost\"\n",
                                    "\"REDIS_PORT\" \"6379\"\n",
                                    "\"RDS_HOST\" \"{{RDS_HOST}}\"\n",
                                    "\"RDS_PORT\" \"{{RDS_PORT}}\"\n",
                                    "\"RDS_USER\" \"{{RDS_USER}}\"\n",
                                    "\"RDS_PW\" \"{{RDS_PW}}\"\n",
                                    "\"RDS_DB_NAME\" \"{{RDS_DB_NAME}}\"\n",
                                    "\"ENV\" \"{{ENV}}\"\n",
                                    "\"LEIN_ROOT\" \"yes\"\n",
                                    "\"STACKNAME\" \"{{STACKNAME}}\"\n",
                                    "}\n"
                                ]]},
                                "context" : {
                                    "ARTIFACT_BUCKET" : { "Ref": "ArtifactBucket" },
                                    "DASHBOARD_REF" : { "Ref": "DashboardRef" },
                                    "KINESIS_A" : { "Ref": "KinesisStreamA" },
                                    "KINESIS_B" : { "Ref": "KinesisStreamB" },
                                    "RDS_HOST" : { "Fn::GetAtt": [ "DBInstance", "Endpoint.Address"]},
                                    "RDS_PORT" : { "Fn::GetAtt": [ "DBInstance", "Endpoint.Port"]},
                                    "RDS_USER" : { "Ref": "DBUsername" },
                                    "RDS_PW" : { "Ref": "DBPassword" },
                                    "RDS_DB_NAME" : { "Ref": "DBName" },
                                    "ENV" : { "Ref": "Environment" },
                                    "STACKNAME" : { "Ref": "AWS::StackName" }
                                },
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/usr/local/bin/get_cluster_config" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "#! /bin/bash\n",
                                    "cache_host=$(aws elasticache describe-cache-clusters --output=text",
                                      " --cache-cluster-id ", { "Ref" : "RedisCluster" },
                                      " --show-cache-node-info --region ", { "Ref" : "AWS::Region" },
                                      " --query 'CacheClusters[0].CacheNodes[0].Endpoint.Address'",
                                      ")\n",
                                    "cache_port=$(aws elasticache describe-cache-clusters --output=text",
                                      " --cache-cluster-id ", { "Ref" : "RedisCluster" },
                                      " --show-cache-node-info --region ", { "Ref" : "AWS::Region" },
                                      " --query 'CacheClusters[0].CacheNodes[0].Endpoint.Port'",
                                      ")\n",
                                      "sed -i \"s/^\\\"REDIS_HOST\\\" .*$/\\\"REDIS_HOST\\\" \\\"$cache_host\\\"/\" /opt/promotably/api.conf\n",
                                      "sed -i \"s/^\\\"REDIS_PORT\\\" .*$/\\\"REDIS_PORT\\\" \\\"$cache_port\\\"/\" /opt/promotably/api.conf\n"
                                ] ]},
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/cfn-hup.conf" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                    "region=", { "Ref" : "AWS::Region" }, "\n"
                                ] ]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                "content": { "Fn::Join" : [ "", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                      " --stack ", { "Ref" : "AWS::StackName" },
                                      " --resource LaunchConfig",
                                      " --region ", { "Ref" : "AWS::Region" },
                                      " -c base,update\n",
                                    "runas=root\n"
                                ] ]}
                            }
                        },
                        "commands" : {
                            "01-get-cluster-config" : { "command" : "/usr/local/bin/get_cluster_config" },
                            "02-apidchkconfig" : { "command" : "chkconfig --add apid" }
                        }
                    },
                    "dbinit" : {
                        "packages" : {
                            "yum" : {
                                "postgresql93" : []
                            }
                        },
                        "files" : {
                            "/tmp/postgres_setup.sql" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "CREATE USER ", {"Ref": "DBUsername"}, " WITH PASSWORD '", {"Ref": "DBPassword"}, "';\n",
                                    "CREATE DATABASE ", {"Ref": "DBName"}, ";\n",
                                    "GRANT ALL PRIVILEGES ON DATABASE ", {"Ref": "DBName"}, " to ", {"Ref": "DBUsername"}, ";\n",
                                    "\\c ", {"Ref": "DBName"}, "\n",
                                    "CREATE EXTENSION \"uuid-ossp\";\n",
                                    "CREATE TABLE IF NOT EXISTS migrations(version varchar(255));\n",
                                    "GRANT ALL PRIVILEGES ON TABLE migrations TO ", {"Ref": "DBUsername"}, ";\n"
                                ] ]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        },
                        "commands" : {
                            "01-postgres-setup" : {
                                "env" : { "PGPASSWORD" : {"Ref": "DBPassword"} },
                                "command" : { "Fn::Join": [ "", [
                                    "psql -f /tmp/postgres_setup.sql -h ",
                                    { "Fn::GetAtt" : [ "DBInstance", "Endpoint.Address" ]}, " -p ",
                                    { "Fn::GetAtt": [ "DBInstance", "Endpoint.Port" ]}, " -U ", {"Ref": "DBUsername"}, "\n"
                                ] ]}
                            }
                        }
                    },
                    "integration" : {
                        "packages" : {
                            "yum" : {
                                "git" : []
                            }
                        },
                        "files" : {
                            "/opt/promotably/api.zip" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "SourceZip" } ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        },
                        "commands" : {
                            "00-integration" :{
                                "env" : {
                                    "ARTIFACT_BUCKET" : { "Ref": "ArtifactBucket" },
                                    "DASHBOARD_INDEX_PATH" : { "Fn::Join" : [ "/", [ "db", { "Ref": "DashboardRef" }, "index.html" ]]},
                                    "KINESIS_A" : { "Ref": "KinesisStreamA" },
                                    "KINESIS_B" : { "Ref": "KinesisStreamB" },
                                    "RDS_HOST" : { "Fn::GetAtt": [ "DBInstance", "Endpoint.Address"]},
                                    "RDS_PORT" : { "Fn::GetAtt": [ "DBInstance", "Endpoint.Port"]},
                                    "RDS_USER" : { "Ref": "DBUsername" },
                                    "RDS_PW" : { "Ref": "DBPassword" },
                                    "RDS_DB_NAME" : { "Ref": "DBName" },
                                    "ENV" : { "Ref": "Environment" },
                                    "STACKNAME" : { "Ref": "AWS::StackName" },
                                    "MIDJE_COLORIZE" : "false",
                                    "LEIN_ROOT" : "yes"
                                },
                                "cwd" : "/opt/promotably",
                                "ignoreErrors" : "false",
                                "command" : { "Fn::Join" : [ "", [
                                    "export REDIS_HOST=$(aws elasticache describe-cache-clusters ",
                                      " --output=text",
                                      " --cache-cluster-id ", { "Ref" : "RedisCluster" },
                                      " --show-cache-node-info --region ", { "Ref" : "AWS::Region" },
                                      " --query 'CacheClusters[0].CacheNodes[0].Endpoint.Address'",
                                      ")\n",
                                    "export REDIS_PORT=$(aws elasticache describe-cache-clusters ",
                                      " --output=text",
                                      " --cache-cluster-id ", { "Ref" : "RedisCluster" },
                                      " --show-cache-node-info --region ", { "Ref" : "AWS::Region" },
                                      " --query 'CacheClusters[0].CacheNodes[0].Endpoint.Port'",
                                      ")\n",
                                    "\n",
                                    "curl https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein > /usr/local/bin/lein\n",
                                    "chmod 0755 /usr/local/bin/lein\n",
                                    "rm -rf api\n",
                                    "mkdir api\n",
                                    "cd api\n",
                                    "unzip ../api.zip\n",
                                    "echo API INTEGRATION TEST RESULTS > /tmp/test_output.txt\n",
                                    "echo >> /tmp/test_output.txt\n",
                                    "echo ENVIRONMENT >> /tmp/test_output.txt\n",
                                    "env >> /tmp/test_output.txt\n",
                                    "echo >> /tmp/test_output.txt\n",
                                    "/usr/local/bin/lein midje api.integration.*",
                                      " 2>&1 >> /tmp/test_output.txt\n",
                                    "aws s3 cp /tmp/test_output.txt 's3://",
                                      { "Ref" : "TestResultsBucket" }, "/",
                                      { "Ref" : "AWS::StackName" }, ".txt'",
                                      " --acl public-read\n",
                                    "aws sns publish",
                                      " --region ", { "Ref": "AWS::Region" },
                                      " --topic-arn ", {"Ref": "TestResultsSNSTopicARN"},
                                      " --message 'https://s3.amazonaws.com/", { "Ref" : "TestResultsBucket" },
                                      "/", { "Ref" : "AWS::StackName" }, ".txt'\n"
                                ]]}
                            }
                        }
                     },
                    "boot" : {
                        "services" : {
                            "sysvinit" : {
                                "nginx" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : [ "/etc/nginx/conf.d/default.conf" ],
                                    "sources" : [ "/var/www/html" ]
                                },
                                "apid" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : [ "/opt/promotably/api.conf", "/opt/promotably/api-current.jar" ]
                                },
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : [ "/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf" ]
                                }
                            }
                        }
                    },
                    "update" : {
                        "commands" : {
                            "01-restartservices" : {
                                "command" : { "Fn::Join" : [ "", [
                                    "service nginx restart\n",
                                    "service apid restart\n"
                                ]]}
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "ImageId" : "ami-b66ed3de",
                "SecurityGroups" : [{ "Ref" : "APIServerSecurityGroup" }, { "Ref" : "VpcDefaultSecurityGroup" }],
                "InstanceType" : "t2.small",
                "KeyName": { "Ref": "KeyPair" },
                "IamInstanceProfile": { "Ref": "RootInstanceProfile" },
                "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
                    "#!/bin/bash -ex\n",
                    "yum upgrade -y\n",

                    "mkdir -p /opt/promotably/api\n",

                    "# Helper function.\n",
                    "",
                    "function error_exit\n",
                    "{\n",
                    "  #/opt/aws/bin/cfn-signal -e 1 -r \"$1\"",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource LaunchConfig ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    "  exit 1\n",
                    "}\n",
                    "\n",
                    "/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackId" },
                      " -r LaunchConfig --region ", { "Ref": "AWS::Region" },
                      " -c default || error_exit 'Failed to run cfn-init - default'\n",
                    "\n",
                    "if [ '", { "Ref": "Environment" }, "' = 'integration' ]; then\n",
                    "  /opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackId" },
                      " -r LaunchConfig --region ", { "Ref": "AWS::Region" },
                      " -c integration || error_exit 'Failed to run cfn-init - integration'\n",
                    "fi\n",
                    "\n",
                    "/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackId" },
                      " -r LaunchConfig --region ", { "Ref": "AWS::Region" },
                      " -c boot || error_exit 'Failed to run cfn-init - boot'\n",
                    "\n",
                    "# All is well, so signal success.\n",
                    "#/opt/aws/bin/cfn-signal -e 0 ",
                      " --stack ", { "Ref" : "AWS::StackName" },
                      " --resource LaunchConfig ",
                      " --region ", { "Ref" : "AWS::Region" }, "\n"
                ] ]} }
            }
        },

        "LaunchGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : { "Fn::If" : [ "UseAllAvailabilityZones",
                    { "Fn::GetAZs": "AWS::Region" },
                    { "Ref" : "AvailabilityZones" }
                ] },
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "MinSize" : "1",
                "MaxSize" : "1",
                "DesiredCapacity" : 1,
                "VPCZoneIdentifier" : { "Ref" : "PrivateSubnets" },
                "LoadBalancerNames" : [ { "Ref" : "APILoadBalancer" } ],
                "Tags": [{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "api" ] ]}, "PropagateAtLaunch" : "true" }]
            }
        }
    },

    "Outputs" : {

        "KinesisStreamA" : {
            "Description" : "Kinesis Stream A",
            "Value" : { "Ref" : "KinesisStreamA" }
        },
        "KinesisStreamB" : {
            "Description" : "Kinesis Stream B",
            "Value" : { "Ref" : "KinesisStreamB" }
        },
        "DBHost" : {
            "Description" : "RDS Host",
            "Value" : {"Fn::GetAtt": [ "DBInstance", "Endpoint.Address"]}
        },
        "DBPort" : {
            "Description" : "RDS Port",
            "Value" : {"Fn::GetAtt": [ "DBInstance", "Endpoint.Port"]}
        },
        "DBInstance" : {
            "Description" : "Main Postgres Database",
            "Value" : { "Ref" : "DBInstance" }
        },
        "RedisCluster" : {
            "Description" : "Redis Cluster",
            "Value" : { "Ref" : "RedisCluster" }
        },
        "KinesisStreamA" : {
            "Description" : "The name of the Kinesis Stream. This was autogenerated by the Kinesis Resource named 'KinesisStreamA'",
            "Value" : { "Ref" : "KinesisStreamA" }
        },
        "KinesisStreamB" : {
            "Description" : "The name of the Kinesis Stream. This was autogenerated by the Kinesis Resource named 'KinesisStreamB'",
            "Value" : { "Ref" : "KinesisStreamB" }
        },
        "APIInstanceGroup" : {
            "Description" : "ASG of the API servers",
            "Value" : { "Ref" : "LaunchGroup" }
        },
        "URL": {
            "Description": "URL for testing",
            "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "APILoadBalancer", "DNSName" ] } ] ] }
        }
    }
}
