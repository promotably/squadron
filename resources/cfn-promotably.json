{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Promotably Super Stack",

    "Parameters" : {
        "ArtifactBucket" : {
            "Description" : "S3 Bucket where build artifacts are stored",
            "Type" : "String",
            "Default" : "promotably-build-artifacts"
        },
        "MetaDataBucket" : {
            "Description" : "S3 Bucket where build metadata is stored",
            "Type" : "String",
            "Default" : "promotably-build-metadata"
        },
        "CiName" : {
            "Description" : "Name of CI system (base path in ArtifactBucket)",
            "Type" : "String",
            "Default" : "jenkins"
        },
        "SquadronRef" : {
            "Description" : "Ref of Squadron build to use",
            "Type" : "String"
        },
        "ApiRef" : {
            "Description" : "Ref of API build to use",
            "Type" : "String"
        },
        "ScribeRef" : {
            "Description" : "Ref of Scribe build to use",
            "Type" : "String"
        },
        "DashboardRef" : {
            "Description" : "Git ref of dashboard to refer to",
            "Type" : "String",
            "Default" : "latest"
        },
        "MetricsAggregatorRef" : {
            "Description" : "Git ref of metrics-aggregator to refer to",
            "Type" : "String"
        },

        "DBSnapshotId" : {
            "Description" : "DB Snapshot to restore from (default looks in Mappings)",
            "Type" : "String",
            "Default" : "default"
        },

        "SshKey" :  {
            "Description" : "Name of an EC2 KeyPair to enable SSH access (default is no ssh key)",
            "Type" : "String",
            "Default": "None",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern" : "[-_ a-zA-Z0-9]*",
            "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
        },
        "SSHFrom" : {
            "Description" : "Lockdown SSH access to the bastion host (default is no access)",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default" : "999.999.999.999/32",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
        },

        "KeyBucket" : {
            "Description" : "Name of the bucket where EC2 Keypairs are stored.",
            "Type" : "String",
            "Default" : "promotably-keyvault"
        },

        "AutoTermStack" : {
            "Description" : "Auto-delete stacks after successful test run",
            "Type" : "String",
            "Default" : "true",
            "AllowedValues" : [ "true", "false" ]
        },
        "DnsName" : {
            "Description" : "Hostname for Api DNS record",
            "Type" : "String",
            "Default" : "default"
        },
        "Environment" : {
            "Description" : "Environment tag",
            "Type" : "String",
            "Default" : "integration",
            "AllowedValues" : [ "integration", "staging", "production" ]
        }
    },

    "Conditions" : {
        "BuildJenkins" : { "Fn::Equals" : [ { "Ref" : "Environment" }, "integration" ]},
        "BuildWoo" : { "Fn::Or" : [
            { "Fn::Equals" : [ { "Ref" : "Environment" }, "integration" ]},
            { "Fn::Equals" : [ { "Ref" : "Environment" }, "staging" ]}
        ]},
        "DnsName" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DnsName" }, "default" ] }]},
        "DBSnapshotId" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DBSnapshotId" }, "default" ] }]}
    },

    "Mappings" : {
        "config" : {
            "integration" : {
                "dbSnapshot" : ""
            },
            "staging" : {
                "dbSnapshot" : "promotably-base"
            },
            "production" : {
                "dbSnapshot" : "promotably-base"
            }
        }
    },

    "Resources" : {

        "Jenkins" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Condition" : "BuildJenkins",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-jenkins.json" ] ]},
                "Parameters" : {
                    "KeyName" : { "Ref" : "SshKey" },
                    "SSHFrom" : { "Ref" : "SSHFrom" },
                    "DnsRecord" : { "Fn::Join" : [ "-", [ "ci", { "Ref" : "DnsName" } ]]},
                    "Environment" : { "Ref" : "Environment" }
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Network" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-network.json" ] ]},
                "Parameters" : {
                    "Environment" : { "Ref" : "Environment" },
                    "BastionKeyName" : { "Ref" : "SshKey" },
                    "NATKeyName" : { "Ref" : "SshKey" },
                    "SSHFrom" : { "Ref" : "SSHFrom" }
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Redis" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-redis.json" ] ]},
                "Parameters" : {
                    "PrivateSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetC" ] } ]]},
                    "VpcId" : { "Fn::GetAtt" : [ "Network", "Outputs.VPCId" ] },
                    "Environment" : { "Ref" : "Environment" }
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Rds" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-postgres.json" ] ]},
                "Parameters" : {
                    "PrivateSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetC" ] } ]]},
                    "VpcId" : { "Fn::GetAtt" : [ "Network", "Outputs.VPCId" ] },
                    "Environment" : { "Ref" : "Environment" },
                    "ArtifactBucket" : { "Ref" : "ArtifactBucket" },
                    "ArtifactPath" : { "Fn::Join" : [ "/", [ { "Ref" : "CiName" }, "api", { "Ref" : "ApiRef" } ] ]},
                    "DBName" : "promotably",
                    "DBUsername" : "promotably",
                    "DBPassword" : "promotably",
                    "DBAllocatedStorage" : "10",
                    "DBSnapshotId" : { "Fn::If" : [ "DBSnapshotId",
                        { "Ref" : "DBSnapshotId" },
                        { "Fn::FindInMap" : [ "config", { "Ref" : "Environment" }, "dbSnapshot" ]}
                    ]},
                    "KeyPair" : { "Ref" : "SshKey" },
                    "VpcDefaultSecurityGroup" : { "Fn::GetAtt" : [ "Network", "Outputs.VpcDefaultSecurityGroup" ] },
                    "AutoTermMigrator" : "true"
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Kinesis" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-kinesis.json" ] ]},
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Api" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-api.json" ] ]},
                "Parameters" : {
                    "ArtifactBucket" : { "Ref" : "ArtifactBucket" },
                    "ArtifactPath" : { "Fn::Join" : [ "/", [ { "Ref" : "CiName" }, "api", { "Ref" : "ApiRef" } ] ]},
                    "DashboardPath" : { "Fn::Join" : [ "/", [ { "Ref" : "CiName" }, "dashboard", { "Ref" : "DashboardRef" } ] ]},
                    "PublicSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetC" ] } ]]},
                    "PrivateSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetC" ] } ]]},
                    "VpcId" : { "Fn::GetAtt" : [ "Network", "Outputs.VPCId" ] },
                    "Environment" : { "Ref" : "Environment" },
                    "VpcDefaultSecurityGroup" : { "Fn::GetAtt" : [ "Network", "Outputs.VpcDefaultSecurityGroup" ] },
                    "NATSecurityGroup" : { "Fn::GetAtt" : [ "Network", "Outputs.NATSecurityGroup" ] },
                    "KeyPair" : { "Ref" : "SshKey" },
                    "RedisCluster" : { "Fn::GetAtt" : [ "Redis", "Outputs.RedisCluster" ] },
                    "RedisClientSecGrp" : { "Fn::GetAtt" : [ "Redis", "Outputs.RedisClientSecGrp" ] },
                    "DBHost" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBHost" ] },
                    "DBPort" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBPort" ] },
                    "DBName" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBName" ] },
                    "DBUsername" : "promotably",
                    "DBPassword" : "promotably",
                    "DBClientSecGrp" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBClientSecGrp" ] },
                    "KinesisStreamA" : { "Fn::GetAtt" : [ "Kinesis", "Outputs.KinesisStreamA" ] },
                    "KinesisStreamB" : { "Fn::GetAtt" : [ "Kinesis", "Outputs.KinesisStreamB" ] },
                    "DnsOverride" : { "Fn::If" : [ "DnsName",
                        { "Fn::Join" : [ "-", [ "api", { "Ref" : "DnsName" } ]]},
                        "default"
                    ]}
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Scribe" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-scribe.json" ] ]},
                "Parameters" : {
                    "ArtifactBucket" : { "Ref" : "ArtifactBucket" },
                    "ArtifactPath" : { "Fn::Join" : [ "/", [ { "Ref" : "CiName" }, "scribe", { "Ref" : "ScribeRef" } ] ]},
                    "DBHost" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBHost" ] },
                    "DBPort" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBPort" ] },
                    "DBName" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBName" ] },
                    "DBUsername" : "promotably",
                    "DBPassword" : "promotably",
                    "DBClientSecGrp" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBClientSecGrp" ] },
                    "KinesisStreamA" : { "Fn::GetAtt" : [ "Kinesis", "Outputs.KinesisStreamA" ] },
                    "KinesisStreamB" : { "Fn::GetAtt" : [ "Kinesis", "Outputs.KinesisStreamB" ] },
                    "PublicSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PublicSubnetC" ] } ]]},
                    "VpcId" : { "Fn::GetAtt" : [ "Network", "Outputs.VPCId" ] },
                    "Environment" : { "Ref" : "Environment" },
                    "VpcDefaultSecurityGroup" : { "Fn::GetAtt" : [ "Network", "Outputs.VpcDefaultSecurityGroup" ] },
                    "KeyPair" : { "Ref" : "SshKey" }
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "MetricsAg" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-metrics-aggregator.json" ] ]},
                "Parameters" : {
                    "ArtifactBucket" : { "Ref" : "ArtifactBucket" },
                    "ArtifactPath" : { "Fn::Join" : [ "/", [ { "Ref" : "CiName" }, "metrics-aggregator", { "Ref" : "MetricsAggregatorRef" } ] ]},
                    "DBHost" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBHost" ] },
                    "DBPort" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBPort" ] },
                    "DBName" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBName" ] },
                    "DBUsername" : "promotably",
                    "DBPassword" : "promotably",
                    "DBClientSecGrp" : { "Fn::GetAtt" : [ "Rds", "Outputs.DBClientSecGrp" ] },
                    "PrivateSubnets" : { "Fn::Join" : [ ",", [
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetA" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetB" ] },
                        { "Fn::GetAtt" : [ "Network", "Outputs.PrivateSubnetC" ] } ]]},
                    "VpcId" : { "Fn::GetAtt" : [ "Network", "Outputs.VPCId" ] },
                    "Environment" : { "Ref" : "Environment" },
                    "VpcDefaultSecurityGroup" : { "Fn::GetAtt" : [ "Network", "Outputs.VpcDefaultSecurityGroup" ] },
                    "KeyPair" : { "Ref" : "SshKey" }
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        },

        "Woo" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Condition" : "BuildWoo",
            "Properties" : {
                "TemplateURL" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "CiName" }, "/squadron/", { "Ref" : "SquadronRef" }, "/cfn-woo.json" ] ]},
                "Parameters" : {
                    "KeyName" : { "Ref" : "SshKey" },
                    "SSHFrom" : { "Ref" : "SSHFrom" },
                    "DnsOverride" : { "Fn::If" : [ "DnsName",
                        { "Fn::Join" : [ "-", [ "woo", { "Ref" : "DnsName" } ]]},
                        "default"
                    ]},
                    "DbImportFile" : "dbdumps/woo-store/staging-latest.mysql.gz",
                    "Environment" : { "Ref" : "Environment" },
                    "ApiHost" : { "Fn::GetAtt" : [ "Api", "Outputs.Hostname" ] }
                },
                "NotificationARNs" : {"Ref" : "AWS::NotificationARNs"}
            }
        }
    },

    "Outputs" : {
        "BastionIp" : {
            "Description" : "Network Stack bastion EIP",
            "Value" : { "Fn::GetAtt" : [ "Network", "Outputs.Bastion" ] }
        },
        "CiUrl" : {
            "Description" : "URL to Jenkins",
            "Value" : { "Fn::If" : [ "BuildJenkins", { "Fn::GetAtt" : [ "Jenkins", "Outputs.URL" ] }, "N/A" ]}
        },
        "WooUrl" : {
            "Description" : "Woo Site URL",
            "Value" : { "Fn::GetAtt" : [ "Woo", "Outputs.URL" ] }
        },
        "ApiStack" : {
            "Description" : "StackId of Api stack",
            "Value" : { "Ref" : "Api" }
        },
        "MetricsAggregatorStack" : {
            "Description" : "StackId of MetricsAggregator stack",
            "Value" : { "Ref" : "MetricsAg" }
        },
        "ScribeStack" : {
            "Description" : "StackId of Scribe stack",
            "Value" : { "Ref" : "Scribe" }
        },
        "RdsStack" : {
            "Description" : "StackId of Rds stack",
            "Value" : { "Ref" : "Rds" }
        }
    }
}
