{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Woo Store",

    "Parameters" : {
        "WpVersion" : {
            "Description" : "Version of Wordpress to install",
            "Type" : "String",
            "Default" : "latest"
        },
        "WooVersion" : {
            "Description" : "Version of WooCommerce to install",
            "Type" : "String",
            "Default" : "latest"
        },
        "ArtifactBucket" : {
            "Description" : "S3 Bucket where build artifacts are stored",
            "Type" : "String",
            "Default" : "promotably-build-artifacts"
        },
        "PluginPath" : {
            "Description" : "Path to Promotably WP/Woocommerce plugin in ArtifactBucket",
            "Type" : "String",
            "Default" : "jenkins/woocommerce/latest/wp-plugin.zip"
        },
        "PhpVersion" : {
            "Description" : "Version of PHP to install",
            "Type" : "String",
            "Default" : "5.5",
            "AllowedValues" : [ "5.3", "5.4", "5.5" ]
        },
        "InstanceType" : {
            "Description" : "EC2 Instance-Type",
            "Type" : "String",
            "Default" : "t2.micro"
        },
        "KeyName" : {
            "Description" : "Name of an EC2 KeyPair to enable SSH access to the host (default is no ssh key)",
            "Type" : "String",
            "Default": "None",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern" : "[-_ a-zA-Z0-9]*",
            "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
        },
        "SSHFrom" : {
            "Description" : "Lockdown SSH access to the bastion host (default is no access)",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default" : "999.999.999.999/32",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "DnsOverride" : {
            "Description" : "Override the Route53 record created for the ELB ('disable' for no record creation)",
            "Type" : "String",
            "Default" : "default"
        },
        "DbBackupBucket" : {
            "Description" : "Bucket to send database dumps to",
            "Type" : "String",
            "Default" : "promotably-persist"
        },
        "DbBackupBucketPrefix" : {
            "Description" : "Base path in DbBackupBucket ['None' to disable backup]",
            "Type" : "String",
            "Default" : "dbdumps/woo-store"
        },
        "DbImportFile" : {
            "Description" : "Object in DbBackupBucket to use for database import",
            "Type" : "String",
            "Default" : "None"
        },
        "ApiHost" : {
            "Description" : "Hostname of Promotably API",
            "Type" : "String",
            "Default" : "None"
        },
        "ApiPort" : {
            "Description" : "Port of Promotably API",
            "Type" : "String",
            "Default" : "None"
        }
    },

    "Conditions" : {
        "SSHFrom" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "SSHFrom" }, "999.999.999.999/32" ] }] },
        "KeyName" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "KeyName" }, "None" ] }] },
        "CreateDns" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DnsOverride" }, "disable" ]} ]},
        "DnsOverride" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DnsOverride" }, "default" ]} ]},
        "DbDump" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DbBackupBucketPrefix" }, "None" ] }] },
        "DbImport" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DbImportFile" }, "None" ] }] }
    },

    "Mappings" : {
        "config" : {
            "us-east-1" : { "ami" : "ami-ee6e2a86" },
            "us-west-2" : { "ami" : "ami-c1c39af1" },
            "eu-west-2" : { "ami" : "ami-8723aef0" }
        }
    },


    "Resources" : {

        "Role": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "Path" : "/",
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Principal" : { "Service" : [ "ec2.amazonaws.com" ] },
                        "Action" : [ "sts:AssumeRole" ]
                    }]
                },
                "Policies" : [{
                    "PolicyName" : "dbbackup",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [{
                            "Effect": "Allow",
                            "Action": [ "s3:ListBucket" ],
                            "Resource": [ { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "DbBackupBucket" } ] ] } ]
                        },{ "Fn::If" : [ "DbDump", {
                                "Effect": "Allow",
                                "Action": [ "s3:PutObject" ],
                                "Resource": [ { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "DbBackupBucket" }, "/", { "Ref" : "DbBackupBucketPrefix" }, "/*" ]]} ]
                            }, { "Ref" : "AWS::NoValue" } ]
                        },{ "Fn::If" : [ "DbImport", {
                                "Effect": "Allow",
                                "Action": [ "s3:GetObject" ],
                                "Resource": [ { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "DbBackupBucket" }, "/", { "Ref" : "DbImportFile" } ]]} ]
                            }, { "Ref" : "AWS::NoValue" } ]
                        }]
                    }
                },{
                    "PolicyName" : "buildartifacts",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [{
                            "Effect": "Allow",
                            "Action": [ "s3:GetObject" ],
                            "Resource": [
                                { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "ArtifactBucket" }, "/", { "Ref" : "PluginPath" } ]]}
                            ]
                        }]
                    }
                }]
            }
        },

        "InstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ { "Ref": "Role" } ]
            }
        },

        "SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Ref" : "AWS::StackName" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" }
                ]
            }
        },

        "SshIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Condition" : "SSHFrom",
            "Properties" : {
                "GroupName" : { "Ref" : "SecurityGroup" },
                "IpProtocol" : "tcp",
                "CidrIp" : { "Ref" : "SSHFrom" },
                "FromPort" : "22", "ToPort" : "22"
            }
        },

        "Instance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "roleName" : { "Ref" : "Role" },
                        "buckets" : [ { "Ref" : "DbBackupBucket" }, { "Ref" : "ArtifactBucket" } ]
                    }
                },
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "base" : [ "base" ],
                        "php53" : [ "php53" ],
                        "php54" : [ "php54" ],
                        "php55" : [ "php55" ],
                        "dbimport" : [ "dbimport" ]
                    },
                    "dbimport" : {
                        "files" : {
                            "/tmp/db-import.mysql.gz" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "DbBackupBucket" }, ".s3.amazonaws.com/", { "Ref" : "DbImportFile" } ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        },
                        "commands" : {
                            "00-unzip-dumpfile" : {
                                "command" : { "Fn::Join" : [ "", [
                                    "stack_name=", { "Ref" : "AWS::StackName" }, "\n",
                                    "site_url=$stack_name.promotably.net/rebelstore\n",
                                    "if [ '", { "Ref" : "DnsOverride" }, "' = 'disable' ]; then\n",
                                    "  site_url=$(ec2-metadata -p | awk '{print $2}')/rebelstore\n",
                                    "elif [ '", { "Ref" : "DnsOverride" }, "' != 'default' ]; then\n",
                                    "  site_url=", { "Ref" : "DnsOverride" }, ".promotably.net/rebelstore\n",
                                    "fi\n",
                                    "gunzip -c /tmp/db-import.mysql.gz | sed \"s,%%_SITE_URL_%%,$site_url,g\" > /tmp/db-import.mysql\n"
                                ]]}
                            }
                        }
                    },
                    "php53" : {
                        "packages" : {
                            "yum" : {
                                "httpd" : [],
                                "php" : [],
                                "php-mysql" : [],
                                "php-gd" : [],
                                "php-pspell" : [],
                                "php-snmp" : [],
                                "php-xml" : [],
                                "php-xmlrpc" : [],
                                "php-pecl-apc" : [],
                                "php-pecl-memcache" : []
                            }
                        }
                    },
                    "php54" : {
                        "packages" : {
                            "yum" : {
                                "httpd24" : [],
                                "php55" : [],
                                "php55-mysqlnd" : [],
                                "php55-gd" : [],
                                "php55-pspell" : [],
                                "php55-snmp" : [],
                                "php55-xml" : [],
                                "php55-xmlrpc" : [],
                                "php55-pecl-apc" : [],
                                "php55-pecl-memcache" : []
                            }
                        }
                    },
                    "php55" : {
                        "packages" : {
                            "yum" : {
                                "httpd24" : [],
                                "php55" : [],
                                "php55-mysqlnd" : [],
                                "php55-gd" : [],
                                "php55-pspell" : [],
                                "php55-snmp" : [],
                                "php55-xml" : [],
                                "php55-xmlrpc" : [],
                                "php55-pecl-apcu" : [],
                                "php55-pecl-memcache" : []
                            }
                        }
                    },
                    "base" : {
                        "packages" : {
                            "yum" : {
                                "mysql" : [],
                                "mysql-server" : []
                            }
                        },
                        "files" : {
                            "/tmp/promotably-plugin.zip" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "ArtifactBucket" }, ".s3.amazonaws.com/", { "Ref" : "PluginPath" } ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/var/www/html/index.html" : {
                                "content" : "<!doctype html><html><head></head><body></body></html>\n",
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/httpd/conf.d/wordpress.conf" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "Alias /rebelstore /var/www/wordpress\n",
                                    "\n",
                                    "<Directory /var/www/wordpress>\n",
                                    "    DirectoryIndex index.php index.html\n",
                                    "    Options Indexes FollowSymLinks MultiViews\n",
                                    "    AllowOverride All\n",
                                    "    Order allow,deny\n",
                                    "    Allow from All\n",
                                    "</Directory>\n"
                                ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/tmp/db-init.mysql" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "DROP DATABASE IF EXISTS test;\n",
                                    "DROP DATABASE IF EXISTS wordpress;\n",
                                    "CREATE DATABASE wordpress;\n",
                                    "GRANT ALL ON wordpress.* TO 'wordpress'@'localhost' IDENTIFIED BY 'pr0m0tably'\n"
                                ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/tmp/install.sh" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "#!/bin/bash\n",
                                    "set -ex\n",
                                    "\n",
                                    "sed -i 's/;date.timezone =.*$/date.timezone = UTC/' /etc/php.ini\n",
                                    "\n",
                                    "if [ '{{WP_VER}}' = 'latest' ]; then\n",
                                    "  curl -L -o /tmp/wordpress.tar.gz https://wordpress.org/latest.tar.gz\n",
                                    "else\n",
                                    "  curl -L -o /tmp/wordpress.tar.gz http://wordpress.org/wordpress-{{WP_VER}}.tar.gz\n",
                                    "fi\n",
                                    "if [ '{{WOO_VER}}' = 'latest' ]; then\n",
                                    "  curl -L -o /tmp/woo.zip http://downloads.wordpress.org/plugin/woocommerce.zip\n",
                                    "else\n",
                                    "  curl -L -o /tmp/woo.zip https://github.com/woothemes/woocommerce/archive/{{WOO_VER}}.zip\n",
                                    "fi\n",
                                    "\n",
                                    "rm -rf /var/www/wordpress /tmp/extract\n",
                                    "mkdir /tmp/extract && cd /tmp/extract\n",
                                    "tar xzf /tmp/wordpress.tar.gz\n",
                                    "mv * /var/www/wordpress\n",
                                    "unzip /tmp/woo.zip\n",
                                    "mv * /var/www/wordpress/wp-content/plugins/woocommerce\n",
                                    "unzip /tmp/promotably-plugin.zip\n",
                                    "mv * /var/www/wordpress/wp-content/plugins/promotably\n",
                                    "\n",
                                    "cp /var/www/wordpress/wp-config-sample.php /var/www/wordpress/wp-config.php\n",
                                    "sed -i 's/database_name_here/wordpress/' /var/www/wordpress/wp-config.php\n",
                                    "sed -i 's/username_here/wordpress/' /var/www/wordpress/wp-config.php\n",
                                    "sed -i 's/password_here/pr0m0tably/' /var/www/wordpress/wp-config.php\n",
                                    "\n",
                                    "sed -i \"s|define('AUTH_KEY'.*$|define('AUTH_KEY', '$(openssl rand -base64 32)');|\" /var/www/wordpress/wp-config.php\n",
                                    "sed -i \"s|define('SECURE_AUTH_KEY'.*$|define('SECURE_AUTH_KEY', '$(openssl rand -base64 32)');|\" /var/www/wordpress/wp-config.php\n",
                                    "sed -i \"s|define('LOGGED_IN_KEY'.*$|define('LOGGED_IN_KEY', '$(openssl rand -base64 32)');|\" /var/www/wordpress/wp-config.php\n",
                                    "sed -i \"s|define('NONCE_KEY'.*$|define('NONCE_KEY', '$(openssl rand -base64 32)');|\" /var/www/wordpress/wp-config.php\n",
                                    "sed -i \"s|define('AUTH_SALT'.*$|define('AUTH_SALT', '$(openssl rand -base64 32)');|\" /var/www/wordpress/wp-config.php\n",
                                    "sed -i \"s|define('SECURE_AUTH_SALT'.*$|define('SECURE_AUTH_SALT', '$(openssl rand -base64 32)');|\" /var/www/wordpress/wp-config.php\n",
                                    "sed -i \"s|define('LOGGED_IN_SALT'.*$|define('LOGGED_IN_SALT', '$(openssl rand -base64 32)');|\" /var/www/wordpress/wp-config.php\n",
                                    "sed -i \"s|define('NONCE_SALT'.*$|define('NONCE_SALT', '$(openssl rand -base64 32)');|\" /var/www/wordpress/wp-config.php\n",
                                    "\n",
                                    "chown -R apache:apache /var/www/wordpress\n",
                                    "\n",
                                    "if [ '", { "Ref" : "ApiHost" }, "' != 'None' ]; then\n",
                                    "  echo 'SetEnv PROMOTABLY_API_HOST ", { "Ref" : "ApiHost" }, "' >> /etc/httpd/conf.d/wordpress.conf\n",
                                    "fi\n",
                                    "if [ '", { "Ref" : "ApiPort" }, "' != 'None' ]; then\n",
                                    "  echo 'SetEnv PROMOTABLY_API_PORT ", { "Ref" : "ApiPort" }, "' >> /etc/httpd/conf.d/wordpress.conf\n",
                                    "fi\n",
                                    "\n",
                                    "service mysqld start\n",
                                    "mysql -u root < /tmp/db-init.mysql\n",
                                    "mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -uroot mysql\n",
                                    "if [ -f /tmp/db-import.mysql ]; then\n",
                                    "  mysql -u root < /tmp/db-import.mysql\n",
                                    "fi\n",
                                    "\n",
                                    "rm -rf /tmp/extract\n"
                                ]]},
                                "context" : {
                                    "WP_VER" : { "Ref" : "WpVersion" },
                                    "WOO_VER" : { "Ref" : "WooVersion" }
                                },
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cron.hourly/dbbackup" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "#!/bin/bash\n",
                                    "\n",
                                    "/usr/local/sbin/dbdump > /var/log/dbdump.out 2>&1\n"
                                ]]},
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/usr/local/sbin/dbdump" : {
                                "content" : { "Fn::Join" : [ "", [
                                    "#!/bin/bash\n",
                                    "\n",
                                    "set -ex\n",
                                    ". /etc/profile.d/aws-apitools-common.sh\n",
                                    "\n",
                                    "bucket={{BUCKET}}\n",
                                    "bucket_prefix={{BUCKET_PREFIX}}\n",
                                    "stack_name={{STACK_NAME}}\n",
                                    "site_url=$stack_name.promotably.net/rebelstore\n",
                                    "if [ '", { "Ref" : "DnsOverride" }, "' = 'disable' ]; then\n",
                                    "  site_url=$(ec2-metadata -p | awk '{print $2}')/rebelstore\n",
                                    "elif [ '", { "Ref" : "DnsOverride" }, "' != 'default' ]; then\n",
                                    "  site_url=", { "Ref" : "DnsOverride" }, ".promotably.net/rebelstore\n",
                                    "fi\n",
                                    "\n",
                                    "[ '$bucket_prefix' = 'None' ] && exit 0\n",
                                    "\n",
                                    "mysqldump --opt --routines --triggers --databases wordpress",
                                      " | sed \"s,$site_url,%%_SITE_URL_%%,g\"",
                                      " | gzip > /tmp/wp-backup.mysql.gz\n",
                                    "\n",
                                    "aws s3 cp --region {{REGION}} /tmp/wp-backup.mysql.gz ",
                                      "\"s3://$bucket/$bucket_prefix/$stack_name/$(date +%F.%H-%M-%S).mysql.gz\"\n"
                                ]]},
                                "context" : {
                                    "BUCKET" : { "Ref" : "DbBackupBucket" },
                                    "BUCKET_PREFIX" : { "Ref" : "DbBackupBucketPrefix" },
                                    "STACK_NAME" : { "Ref" : "AWS::StackName" },
                                    "REGION" : { "Ref": "AWS::Region" }
                                },
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        },
                        "commands" : {
                            "00-setup-wordpress" : {
                                "command" : "/tmp/install.sh"
                            },
                            "05-purge-backup-file" : {
                                "command" : "rm -f /etc/cron.hourly/dbbackup.bak"
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "httpd" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" : [ "/etc/httpd/conf.d/wordpress.conf" ],
                                    "sources" : [ "/var/www/wordpress" ]
                                },
                                "mysqld" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "KeyName"  : { "Fn::If" : [ "KeyName",
                    { "Ref" : "KeyName" }, { "Ref" : "AWS::NoValue" } ]},
                "ImageId" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "ami" ]},
                "SecurityGroupIds" : [{ "Ref" : "SecurityGroup" }],
                "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -ex\n",
                    "\n",
                    "# retry yum upgrade if it fails, otherwise keep going\n",
                    "if ! yum upgrade -y; then\n",
                    "  sleep 30\n",
                    "  yum upgrade -y || true\n",
                    "fi\n",
                    "\n",
                    "case '", { "Ref" : "PhpVersion" }, "' in\n",
                    "  5.3)\n",
                    "    /opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" },
                        " -r Instance -c php53 --region ", { "Ref": "AWS::Region" }, "\n",
                    "    ;;\n",
                    "  5.4)\n",
                    "    /opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" },
                        " -r Instance -c php54 --region ", { "Ref": "AWS::Region" }, "\n",
                    "    ;;\n",
                    "  5.5)\n",
                    "    /opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" },
                        " -r Instance -c php55 --region ", { "Ref": "AWS::Region" }, "\n",
                    "    ;;\n",
                    "esac\n",
                    "\n",
                    "if [ '", { "Ref" : "DbImportFile" }, "' = 'None' ]; then\n",
                    "  /opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" },
                      " -r Instance -c base --region ", { "Ref": "AWS::Region" }, "\n",
                    "else\n",
                    "  /opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" },
                      " -r Instance -c dbimport,base --region ", { "Ref": "AWS::Region" }, "\n",
                    "fi\n",
                    "\n"
                ]]} },
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } }]
            }
        },

        "DnsRecord" : {
            "Type" : "AWS::Route53::RecordSet",
            "Condition" : "CreateDns",
            "Properties" : {
                "HostedZoneName" : "promotably.net.",
                "Name" : { "Fn::Join" : [ "", [
                    { "Fn::If" : [ "DnsOverride", { "Ref" : "DnsOverride" }, { "Ref" : "AWS::StackName" } ]},
                    ".promotably.net."
                ]]},
                "Type" : "CNAME",
                "TTL" : "120",
                "ResourceRecords" : [ { "Fn::GetAtt": [ "Instance", "PublicDnsName" ] } ]
            }
        }
    },

    "Outputs" : {

        "Instance" : {
            "Description" : "Instance-id of Woo server",
            "Value" : { "Ref" : "Instance" }
        },
        "URL": {
            "Description": "URL for testing",
            "Value": { "Fn::If" : [ "CreateDns",
                { "Fn::Join" : [ "", [ "http://", { "Ref" : "DnsRecord" }, "/rebelstore" ]]},
                { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt": [ "Instance", "PublicDnsName" ] }, "/rebelstore" ]]}
            ]}
        }

    }
}
