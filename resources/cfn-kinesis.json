{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Kinesis Streams",

    "Parameters" : {
        "Environment" : {
            "Description" : "Environment tag",
            "Type" : "String",
            "Default" : "integration",
            "AllowedValues" : [ "integration", "staging", "production" ]
        }
    },

    "Conditions" : {
        "CreateAlarm" : { "Fn::Or" : [{ "Fn::Equals" : [ { "Ref" : "Environment" }, "production" ]},
                                      { "Fn::Equals" : [ { "Ref" : "Environment" }, "integration" ]}]}
    },

    "Mappings" : {
        "config" : {
            "integration" : {
                "archiveBucket" : "promotably-kinesis-archive-nonprod"
            },
            "staging" : {
                "archiveBucket" : "promotably-kinesis-archive-nonprod"
            },
            "production" : {
                "archiveBucket" : "promotably-kinesis-archive-prod"
            }
        }
    },

    "Resources" : {

        "KinesisStreamA" : {
            "Type" : "AWS::Kinesis::Stream",
            "Properties" : {
                "ShardCount" : "2"
            }
        },

        "KinesisStreamB" : {
            "Type" : "AWS::Kinesis::Stream",
            "Properties" : {
                "ShardCount" : "2"
            }
        },

        "NoPutRecordsAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Condition": "CreateAlarm",
            "Properties": {
                "AlarmDescription": "Alarm is no successful PutRecords for 2 hours",
                "Namespace": "AWS/Kinesis",
                "MetricName": "PutRecord.Success",
                "Dimensions": [{ "Name": "StreamName", "Value": { "Ref" : "KinesisStreamA" }}],
                "Statistic": "Sum",
                "Period": "3600",
                "EvaluationPeriods": "2",
                "Threshold": "0",
                "ComparisonOperator": "LessThanOrEqualToThreshold",
                "AlarmActions": [{ "Fn::Join" : [ "-", [ { "Fn::Select" : [ "0", { "Ref" : "AWS::NotificationARNs" } ] }, "notification" ] ] }]
            }
        },

        "NoGetRecordsAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Condition": "CreateAlarm",
            "Properties": {
                "AlarmDescription": "Alarm is no successful GetRecords for 2 hours",
                "Namespace": "AWS/Kinesis",
                "MetricName": "GetRecords.Success",
                "Dimensions": [{ "Name": "StreamName", "Value": { "Ref" : "KinesisStreamA" }}],
                "Statistic": "Sum",
                "Period": "3600",
                "EvaluationPeriods": "2",
                "Threshold": "0",
                "ComparisonOperator": "LessThanOrEqualToThreshold",
                "AlarmActions": [{ "Fn::Join" : [ "-", [ { "Fn::Select" : [ "0", { "Ref" : "AWS::NotificationARNs" } ] }, "notification" ] ] }]
            }
        },

        "LambdaRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "Path" : "/",
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Principal" : {
                            "Service" : [ "lambda.amazonaws.com" ]
                        },
                        "Action" : [ "sts:AssumeRole" ]
                    }]
                },
                "Policies" : [{
                    "PolicyName" : "AWSLambdaKinesisExecution",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [{
                            "Effect": "Allow",
                            "Action": [
                                "kinesis:DescribeStream",
                                "kinesis:GetRecords",
                                "kinesis:GetShardIterator",
                                "kinesis:ListStreams",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "*"
                        }]
                    }
                },{
                    "PolicyName" : "Archive",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [{
                            "Effect" : "Allow",
                            "Action" : "cloudwatch:*",
                            "Resource" : "*"
                        },{
                            "Effect": "Allow",
                            "Action": [ "s3:PutObject" ],
                            "Resource": [ { "Fn::Join" : [ "", [
                                "arn:aws:s3:::",
                                { "Fn::FindInMap" : [ "config", { "Ref" : "Environment" }, "archiveBucket" ]},
                                "/*" ]]
                            }]
                        }]
                    }
                }]
            }
        }
    },

    "Outputs" : {
        "KinesisStreamA" : {
            "Description" : "Kinesis Stream A",
            "Value" : { "Ref" : "KinesisStreamA" }
        },
        "KinesisStreamB" : {
            "Description" : "Kinesis Stream B",
            "Value" : { "Ref" : "KinesisStreamB" }
        },
        "LambdaRole" : {
            "Description" : "IAM Role for Lambda S3 Archival",
            "Value" : { "Ref" : "LambdaRole" }
        },
        "LambdaRoleArn" : {
            "Description" : "IAM Role for Lambda S3 Archival",
            "Value" : { "Fn::GetAtt" : [ "LambdaRole", "Arn" ] }
        },
        "ArchiveBucket" : {
            "Description" : "S3 Bucket for event archival via Lambda",
            "Value" : { "Fn::FindInMap" : [ "config", { "Ref" : "Environment" }, "archiveBucket" ]}
        }
    }
}
