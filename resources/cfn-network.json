{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Networking infrastructure.",

    "Parameters" : {
        "Environment" : {
            "Description" : "Environment tag",
            "Type" : "String",
            "Default" : "integration",
            "AllowedValues" : [ "integration", "staging", "production" ]
        },

        "BastionKeyName" : {
            "Description" : "Name of an EC2 KeyPair to enable SSH access to the bastion host (default is no ssh key)",
            "Type" : "String",
            "Default": "None",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern" : "[-_ a-zA-Z0-9]*",
            "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
        },

        "NATKeyName" : {
            "Description" : "Name of an EC2 KeyPair to enable SSH access to the nat host (default is no ssh key)",
            "Type" : "String",
            "Default": "None",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern" : "[-_ a-zA-Z0-9]*",
            "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
        },

        "SSHFrom" : {
            "Description" : "Lockdown SSH access to the bastion host (default is no access)",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default" : "999.999.999.999/32",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
        },

        "BastionInstanceType" : {
            "Description" : "Bastion Host EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro"
        },

        "BastionKeyBucket" : {
            "Description" : "Name of the bucket where EC2 Keypairs are stored.",
            "Type" : "String",
            "Default" : "promotably-keyvault"
        },

        "NATInstanceType" : {
            "Description" : "NET Device EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro"
        }
    },

    "Conditions" : {
        "SSHFrom" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "SSHFrom" }, "999.999.999.999/32" ] }] },
        "Bastion" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "BastionKeyName" }, "None" ] }] },
        "NATKeyName" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "NATKeyName" }, "None" ] }] },
        "IsProd" : { "Fn::Equals" : [ { "Ref" : "Environment" }, "production" ]}
    },

    "Mappings" : {

        "config" : {
            "cidr" : {
                "VPC"            : "10.236.0.0/16",
                "PublicAll"      : "10.236.128.0/17",
                "PrivateAll"     : "10.236.0.0/17",

                "PublicSubnetA"  : "10.236.128.0/20",
                "PublicSubnetB"  : "10.236.144.0/20",
                "PublicSubnetC"  : "10.236.160.0/20",

                "PrivateSubnetA" : "10.236.0.0/20",
                "PrivateSubnetB" : "10.236.16.0/20",
                "PrivateSubnetC" : "10.236.32.0/20"
            },
            "us-east-1" : {
                "ami" : "ami-1ecae776",
                "azA" : "us-east-1a",
                "azB" : "us-east-1c",
                "azC" : "us-east-1d"
            },
            "us-west-2" : {
                "ami" : "ami-e7527ed7",
                "azA" : "us-west-2a",
                "azB" : "us-west-2b",
                "azC" : "us-west-2c"
            },
            "eu-west-2" : {
                "ami" : "ami-a10897d6",
                "azA" : "eu-west-1a",
                "azB" : "eu-west-1b",
                "azC" : "eu-west-1c"
            }
        }
    },

    "Resources" : {

        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "VPC" ]},
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "PublicSubnetA" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "azA" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PublicSubnetA" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "PublicSubnetB" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "azB" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PublicSubnetB" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "PublicSubnetC" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "azC" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PublicSubnetC" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "GatewayToInternet" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PublicRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "PublicSubnetARouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetA" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },

        "PublicSubnetBRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetB" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },

        "PublicSubnetCRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetC" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },

        "PublicNetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Public" }]
            }
        },

        "InboundHTTPPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "80", "To" : "80" }
            }
        },

        "InboundHTTPSPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "101",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "443", "To" : "443" }
            }
        },

        "InboundVpcPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "102",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "VPC" ] }
            }
        },

        "InboundSSHPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Condition" : "SSHFrom",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "103",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Ref" : "SSHFrom" },
                "PortRange" : { "From" : "22", "To" : "22" }
            }
        },

        "InboundNtpTcpPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "104",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "123", "To" : "123" }
            }
        },

        "InboundNtpUdpPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "105",
                "Protocol" : "17",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "123", "To" : "123" }
            }
        },

        "InboundHTTP8000PublicNetAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "110",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "8000", "To" : "8000" }
            }
        },

        "InboundEphemeralTcpPublicNetAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "900",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "1024", "To" : "65535" }
            }
        },

        "InboundEphemeralUdpPublicNetAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "901",
                "Protocol" : "17",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "1024", "To" : "65535" }
            }
        },

        "OutboundPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0"
            }
        },

        "PublicSubnetANetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetA" },
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
            }
        },

        "PublicSubnetBNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetB" },
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
            }
        },

        "PublicSubnetCNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnetC" },
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
            }
        },

        "PrivateSubnetA" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "azA" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateSubnetA" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Private" }]
            }
        },

        "PrivateSubnetB" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "azB" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateSubnetB" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Private" }]
            }
        },

        "PrivateSubnetC" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "VPC",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "azC" ]},
                "CidrBlock" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateSubnetC" ]},
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Private" }]
            }
        },

        "PrivateRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Private" }]
            }
        },

        "PrivateRoute" : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PrivateRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "InstanceId" : { "Ref" : "NATDevice" }
            }
        },

        "PrivateSubnetARouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetA" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },

        "PrivateSubnetBRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetB" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },

        "PrivateSubnetCRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetC" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
            }
        },

        "PrivateNetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
                          { "Key" : "Environment", "Value" : { "Ref" : "Environment" } },
                          { "Key" : "Network", "Value" : "Private" }]
            }
        },

        "InboundPrivateNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0"
            }
        },

        "OutBoundPrivateNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "-1",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0"
            }
        },

        "PrivateSubnetANetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetA" },
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
            }
        },

        "PrivateSubnetBNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetB" },
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
            }
        },

        "PrivateSubnetCNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnetC" },
                "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
            }
        },

        "VpcDefaultSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " Default Group" ] ]},
                "VpcId" : { "Ref" : "VPC" },
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" } }],
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "SourceSecurityGroupId" : { "Ref" : "BastionSecurityGroup" }}
                ],
                "SecurityGroupEgress"  : [
                    { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" },
                    { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : "0.0.0.0/0" },
                    { "IpProtocol" : "tcp", "FromPort" : "123",  "ToPort" : "123",  "CidrIp" : "0.0.0.0/0" },
                    { "IpProtocol" : "udp", "FromPort" : "123",  "ToPort" : "123",  "CidrIp" : "0.0.0.0/0" }
                ]
            }
        },

        "DbClientSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, " database clients" ] ]},
                "VpcId" : { "Ref" : "VPC" },
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" }}]
            }
        },

        "NATSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " NAT" ] ]},
                "VpcId" : { "Ref" : "VPC" },
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" } }],
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateAll" ]}},
                    { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateAll" ]}},
                    { "IpProtocol" : "tcp", "FromPort" : "123", "ToPort" : "123", "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateAll" ]}},
                    { "IpProtocol" : "udp", "FromPort" : "123", "ToPort" : "123", "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "PrivateAll" ]}}
                ]
            }
        },

        "NATIPAddress" : {
            "Type" : "AWS::EC2::EIP",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "Domain" : "vpc",
                "InstanceId" : { "Ref" : "NATDevice" }
            }
        },

        "NATDevice" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "InstanceType" : { "Ref" : "NATInstanceType" },
                "SubnetId" : { "Ref" : "PublicSubnetB" },
                "KeyName"  : { "Fn::If" : [ "NATKeyName", { "Ref" : "NATKeyName" }, { "Ref" : "AWS::NoValue" } ] },
                "SourceDestCheck" : "false",
                "ImageId" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "ami" ]},
                "SecurityGroupIds" : [{ "Ref" : "NATSecurityGroup" }, { "Ref" : "VpcDefaultSecurityGroup" }],
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -ex\n",
                    "\n",
                    "iptables -t nat -A POSTROUTING -o eth0 -s ",
                        { "Fn::FindInMap" : [ "config", "cidr", "PrivateAll" ]},
                        " -j MASQUERADE\n",
                    "sysctl -w net.ipv4.ip_forward=1\n",
                    "service iptables save\n",
                    "sed 's/^net[.]ipv4[.]ip_forward/#net.ipv4.ip_forward/' /etc/sysctl.conf\n",
                    "echo 'net.ipv4.ip_forward = 1' > sysctl.d/99-nat-ip_forward\n",
                    "\n",
                    "# retry yum upgrade if it fails, otherwise keep going\n",
                    "if ! yum upgrade -y; then\n",
                    "  sleep 30\n",
                    "  yum upgrade -y || true\n",
                    "fi\n",
                    "\n"
                ]]} },
                "Tags": [{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "nat" ] ]} },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" } }]
            }
        },

        "BastionIPAddress" : {
            "Type" : "AWS::EC2::EIP",
            "Condition" : "Bastion",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "Domain" : "vpc",
                "InstanceId" : { "Ref" : "BastionHost" }
            }
        },

        "BastionRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "Path" : "/",
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Principal" : { "Service" : [ "ec2.amazonaws.com" ] },
                        "Action" : [ "sts:AssumeRole" ]
                    }]
                },
                "Policies" : [{
                    "PolicyName" : "BastionInstance",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [{
                            "Effect": "Allow",
                            "Action": [ "s3:Get*" ],
                            "Resource": [
                                { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "BastionKeyBucket" }, "/*" ] ] }
                            ]
                        }]
                    }
                }]
            }
        },

        "BastionInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ { "Ref": "BastionRole" } ]
            }
        },

        "BastionSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " Bastion" ] ]},
                "VpcId" : { "Ref" : "VPC" },
                "Tags": [{ "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" } }],
                "SecurityGroupIngress" : { "Fn::If" : [ "SSHFrom",
                    [{ "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHFrom" }}],
                    { "Ref" : "AWS::NoValue" }
                ]},
                "SecurityGroupEgress"  : [
                    { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Fn::FindInMap" : [ "config", "cidr", "VPC" ]}},
                    { "IpProtocol" : "tcp", "FromPort" : "11371",  "ToPort" : "11371",  "CidrIp" : "0.0.0.0/0" }
                ]
            }
        },

        "BastionHost" : {
            "Type" : "AWS::EC2::Instance",
            "Condition" : "Bastion",
            "Metadata" : {
                "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
                        "type" : "S3",
                        "roleName" : { "Ref" : "BastionRole" },
                        "buckets" : [ { "Ref" : "BastionKeyBucket" } ]
                    }
                },
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "files" : {
                            "/home/ec2-user/.ssh/id_rsa" : {
                                "source" : { "Fn::Join" : [ "", [ "https://", { "Ref" : "BastionKeyBucket" }, ".s3.amazonaws.com/", { "Ref" : "BastionKeyName" }, ".pem" ]]},
                                "mode"    : "000600",
                                "owner"   : "ec2-user",
                                "group"   : "ec2-user"
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "BastionInstanceType" },
                "KeyName"  : { "Ref" : "BastionKeyName" },
                "SubnetId" : { "Ref" : "PublicSubnetA" },
                "ImageId" : { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "ami" ]},
                "SecurityGroupIds" : { "Fn::If": [ "IsProd",
                    [{ "Ref" : "BastionSecurityGroup" }, { "Ref" : "VpcDefaultSecurityGroup" }],
                    [{ "Ref" : "BastionSecurityGroup" }, { "Ref" : "VpcDefaultSecurityGroup" }, { "Ref" : "DbClientSecurityGroup" }]
                ]},
                "IamInstanceProfile" : { "Ref" : "BastionInstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -ex\n",
                    "\n",
                    "# retry yum upgrade if it fails, otherwise keep going\n",
                    "if ! yum upgrade -y; then\n",
                    "  sleep 30\n",
                    "  yum upgrade -y || true\n",
                    "fi\n",
                    "\n",
                    "/opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackId" },
                       " -r BastionHost --region ", { "Ref": "AWS::Region" }, "\n"
                ]]} },
                "Tags": [{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "bastion" ] ]} },
                         { "Key" : "Environment", "Value" : { "Ref" : "Environment" } }]
            }
        }
    },

    "Outputs" : {
        "VPCId" : {
            "Description" : "VPCId of the newly created VPC",
            "Value" :  { "Ref" : "VPC" }
        },
        "PublicSubnetA" : {
            "Description" : "SubnetId of the public subnet",
            "Value" :  { "Ref" : "PublicSubnetA" }
        },
        "PublicSubnetB" : {
            "Description" : "SubnetId of the public subnet",
            "Value" :  { "Ref" : "PublicSubnetB" }
        },
        "PublicSubnetC" : {
            "Description" : "SubnetId of the public subnet",
            "Value" :  { "Ref" : "PublicSubnetC" }
        },
        "PrivateSubnetA" : {
            "Description" : "SubnetId of the private subnet",
            "Value" :  { "Ref" : "PrivateSubnetA" }
        },
        "PrivateSubnetB" : {
            "Description" : "SubnetId of the private subnet",
            "Value" :  { "Ref" : "PrivateSubnetB" }
        },
        "PrivateSubnetC" : {
            "Description" : "SubnetId of the private subnet",
            "Value" :  { "Ref" : "PrivateSubnetC" }
        },
        "Bastion" : {
            "Description" : "IP Address of the Bastion host",
            "Value" : { "Fn::If" : [ "Bastion", { "Ref" : "BastionIPAddress" }, "None" ] }
        },
        "VpcDefaultSecurityGroup" : {
            "Description" : "VPC Default Security Group",
            "Value" : { "Ref" : "VpcDefaultSecurityGroup" }
        },
        "DbClientSecurityGroup" : {
            "Description" : "DB Clients Security Group",
            "Value" : { "Ref" : "DbClientSecurityGroup" }
        },
        "BastionSecurityGroup" : {
            "Description" : "Security Group of the Bastion Host",
            "Value" : { "Ref" : "BastionSecurityGroup" }
        },
        "NATSecurityGroup" : {
            "Description" : "Security Group of the NAT Devices",
            "Value" : { "Ref" : "NATSecurityGroup" }
        },
        "AvailabilityZones" : {
            "Description" : "List of availablity zones in which VPC is deployed",
            "Value" : { "Fn::Join" : [ ",", [
                { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "azA" ]},
                { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "azB" ]},
                { "Fn::FindInMap" : [ "config", { "Ref" : "AWS::Region" }, "azC" ]}
            ] ]}
        }
    }
}
